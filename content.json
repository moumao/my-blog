{"meta":{"title":"某猫のBlog","subtitle":null,"description":null,"author":"moumao","url":"http://yoursite.com"},"pages":[{"title":"tags","date":"2017-03-20T14:58:10.000Z","updated":"2017-03-20T14:58:10.000Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"你可以叫我某猫","date":"2017-03-20T12:57:33.000Z","updated":"2017-03-22T16:24:34.000Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"腹有诗书气自华 算是我很喜欢的一句话了吧 总是理想成为这样的人 关于我 在主站的about me中都有说过 喜欢前端，喜欢摄影，喜欢晒妻 喜欢所有美貌的一切 大抵是个颜控吧哈哈 所以也算半个果粉吧 也是别人嘴里的肥宅？？？ 今年一定要减肥 hexo的博客主题暂时用Material吧 在此谢谢vio喵的作品 关于为什么用github搭hexo 因为我的服务器装Nginx的时候炸了 就懒得再弄 其实对服务器的东西也不是很懂 打算写完自己的主题再放到服务器上 自己的主题还在开发中 主站是用node搭建的 不过很简单 也不知道写些什么上去 晒妻的照片先放到LOFTER上 之后会再做个相册的 就这些吧。 希望今年能在杭州找个说得过去的工作 感觉越学坑越多"}],"posts":[{"title":"JS中this的指向","slug":"JS中this的指向","date":"2017-03-22T06:14:42.000Z","updated":"2017-03-22T06:19:36.000Z","comments":true,"path":"2017/03/22/JS中this的指向/","link":"","permalink":"http://yoursite.com/2017/03/22/JS中this的指向/","excerpt":"","text":"this是Javascript语言的一个关键字。 它代表函数运行时，自动生成的一个内部对象，只能在函数内部使用。比如: 12345function test()&#123; this.x = 1; &#125; 随着函数使用场合的不同，this的值会发生变化。但是有一个总的原则，那就是this指的是，调用函数的那个对象。 下面分四种情况，详细讨论this的用法。 情况一：纯粹的函数调用 这是函数的最通常用法，属于全局性调用，因此this就代表全局对象。 请看下面这段代码，它的运行结果是1。 123456789function test()&#123; this.x = 1; alert(this.x); &#125; test(); // 1 为了证明this就是全局对象，我对代码做一些改变： 123456789var x = 1; function test()&#123; alert(this.x); &#125; test(); // 1 运行结果还是1。再变一下： 1234567891011var x = 1; function test()&#123; this.x = 0; &#125; test(); alert(x); //0 情况二：作为对象方法的调用 函数还可以作为某个对象的方法调用，这时this就指这个上级对象。 12345678910111213function test()&#123; alert(this.x); &#125; var o = &#123;&#125;; o.x = 1; o.m = test; o.m(); // 1 情况三 作为构造函数调用 所谓构造函数，就是通过这个函数生成一个新对象（object）。这时，this就指这个新对象。 123456789function test()&#123; this.x = 1; &#125; var o = new test(); alert(o.x); // 1 运行结果为1。为了表明这时this不是全局对象，我对代码做一些改变： 1234567891011var x = 2; function test()&#123; this.x = 1; &#125; var o = new test(); alert(x); //2 运行结果为2，表明全局变量x的值根本没变。 情况四 apply调用 apply()是函数对象的一个方法，它的作用是改变函数的调用对象，它的第一个参数就表示改变后的调用这个函数的对象。因此，this指的就是这第一个参数 123456789101112131415var x = 0; function test()&#123; alert(this.x); &#125; var o=&#123;&#125;; o.x = 1; o.m = test; o.m.apply(); //0 apply()的参数为空时，默认调用全局对象。因此，这时的运行结果为0，证明this指的是全局对象。 如果把最后一行代码修改为 : 1o.m.apply(o); //1 运行结果就变成了1，证明了这时this代表的是对象o","categories":[],"tags":[{"name":"JS","slug":"JS","permalink":"http://yoursite.com/tags/JS/"}]},{"title":" js中Math.random()生成指定范围数值的随机数","slug":"js中Math-random-生成指定范围数值的随机数","date":"2017-03-20T15:43:56.000Z","updated":"2017-03-22T06:24:58.000Z","comments":true,"path":"2017/03/20/js中Math-random-生成指定范围数值的随机数/","link":"","permalink":"http://yoursite.com/2017/03/20/js中Math-random-生成指定范围数值的随机数/","excerpt":"","text":"定义和用法 random() 方法可返回介于 0 ~ 1 之间的一个随机数。 语法 Math.random() 返回值 0.0 ~ 1.0 之间的一个伪随机数。 实例 在本例中，我们将取得介于 0 到 1 之间的一个随机数： 12345&lt;script type=&quot;text/javascript&quot;&gt;document.write(Math.random());&lt;/script&gt;// 输出：0.15246391076246546 关于如何生成指定范围值的随机数？ 利用 parseInt()、Math.floor() 或者 Math.ceil()进行四舍五入处理 我们看到，直接使用Math.random()方法，生成的是一个小于1的数，所以： Math.random()*5 得到的结果是一个小于5的随机数。而我们通常希望得到的是0-5之间的整数，所以我们需要对得到的结果四舍五入处理一下，从而得到我们期望的整数。parseInt()、Math.floor()和Math.ceil()都可以起到四舍五入的作用。12345var randomNum = Math.random()*5;alert(randomNum); // 2.9045290905811183 alert(parseInt(randomNum,10)); // 2alert(Math.floor(randomNum)); // 2alert(Math.ceil(randomNum)); // 3 由测试的代码我们可以看到，parseInt()和Math.floor()的效果是一样的，都是向下取整数部分。所以parseInt(Math.random()*5,10)和Math.floor(Math.random()*5)都是生成的0-4之间的随机数，Math.ceil(Math.random()*5)则是生成的1-5之间的随机数。 生成指定范围数值随机数 如果你希望生成1到任意值的随机数，公式就是这样的： 1234// max - 期望的最大值parseInt(Math.random()*max,10)+1;Math.floor(Math.random()*max)+1;Math.ceil(Math.random()*max); 如果你希望生成0到任意值的随机数，公式就是这样的： 123// max - 期望的最大值parseInt(Math.random()*(max+1),10);Math.floor(Math.random()*(max+1)); 如果你希望生成任意值到任意值的随机数，公式就是这样的： 1234// max - 期望的最大值// min - 期望的最小值 parseInt(Math.random()*(max-min+1)+min,10);Math.floor(Math.random()*(max-min+1)+min);","categories":[],"tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"}]},{"title":"Node.js部署到阿里云服务器","slug":"nodejs部署到阿里云全过程","date":"2017-03-16T07:26:51.000Z","updated":"2017-03-22T06:24:52.000Z","comments":true,"path":"2017/03/16/nodejs部署到阿里云全过程/","link":"","permalink":"http://yoursite.com/2017/03/16/nodejs部署到阿里云全过程/","excerpt":"","text":"整个部署过程学到了不少东西，记录一下。 参考了以下文章： http://itbilu.com/other/relate/NJ2TJohl.htmlhttps://segmentfault.com/a/1190000004051670http://borninsummer.com/2015/06/17/notes-on-developing-nodejs-webapp/https://bbs.aliyun.com/read/146189.html 1. 到阿里云购买云服务器 ECS 。https://www.aliyun.com/product/ecs如果是在校学生，在淘宝有实名认证，且在学信网有注册，可以试试抢学生的首月优惠套餐。https://www.aliyun.com/act/aliyun/campus.html作为一个穷逼+不熟悉服务器配置的菜鸟。选了最便宜的套餐：CPU： 1核 / 内存： 1024 MB / 带宽：1Mbps / 操作系统： CentOS 7.0购买环节会设置 ssh 登陆密码，记下密码。登陆到阿里云，查看购买的实例。注意公网 IP，下一步会用到2. 登陆服务器sudo ssh 你的服务器ip地址 关于 ssh 登陆，具体可以看http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html 这篇文章。 提示输入mac的密码，提示输入服务器密码。输入后连接成功并显示服务器信息，如下： 登陆服务器后。这里对于我这个 Linux 菜鸟有个大坑………就是 Linux 系统常见的目录结构和文件放置区域。使用 root 用户身份登陆后，会直接进入到下图 红色箭头标出的 root 目录下。先 cd .. 跳转到上一层, 再 ls -a ，就可以看到类似下图的目录结构了。 3.安装 node 和 mongodb node – 编译后二进制文件应在/usr/local/bin/node 下 mongodb –安装在/usr/local/mongodb 下 下面就一步一步来，首先升级CentOS 1yum -y update 升级后，跳转到 /usr/local/src , 这个文件夹通常用来存放软件源代码 1cd /usr/local/src 下载 nodejs 代码，也可以使用scp命令直接上传，因为下载实在太慢了。 12wget http://nodejs.org/dist/v0.12.5/node-v0.12.5.tar.gz//注*根据最新版本号为准 解压 1tar -xzvf node-v0.12.5.tar.gz 进入解压后的文件夹 1cd node-v0.12.5 执行配置脚本来进行编译预处理 1./configure 编译源代码 12make//注*这个时间可能会很久 当编译完成后，需要使之在系统范围内可用, 编译后的二进制文件将被放置到系统路径，默认情况下，Node二进制文件应该放在/user/local/bin/node文件夹下 1make install 安装 express 和 forever，这两个模块都推荐 global 安装 1npm -g install express forever 建立超级链接, 不然 sudo node 时会报 “command not found” 12345sudo ln -s /usr/local/bin/node /usr/bin/nodesudo ln -s /usr/local/lib/node /usr/lib/nodesudo ln -s /usr/local/bin/npm /usr/bin/npmsudo ln -s /usr/local/bin/node-waf /usr/bin/node-wafsudo ln -s /usr/local/bin/forever /usr/bin/forever Nodejs到这里就基本安装完成了。 下面来安装mongodb 软件安装位置：/usr/local/mongodb数据存放位置：/var/mongodb/data日志存放位置：/var/mongodb/logs 首先下载安装包 12cd /usr/localwget http://fastdl.mongodb.org/linux/mongodb-linux-x86_64-2.4.9.tgz 解压安装包，重命名文件夹为mongodb 12tar zxvf mongodb-linux-x86_64-2.6.0.tgzmv mongodb-linux-x86_64-2.6.0 mongodb 创建数据和日志存放目录 123mkdir /var/mongodbmkdir /var/mongodb/datamkdir /var/mongodb/logs 打开rc.local文件，添加CentOS开机启动项： 1vim /etc/rc.d/rc.local 将mongodb启动命令追加到本文件中，让mongodb开机自启动： 12/usr/local/mongodb/bin/mongod --dbpath=/var/mongodb/data --logpath /var/mongodb/logs/log.log -fork 关闭 vim 后，直接手动启动mongodb 12/usr/local/mongodb/bin/mongod --dbpath=/var/mongodb/data --logpath /var/mongodb/logs/log.log -fork 看到类似的信息，说明已启动成功。我在这里发了个傻，以为26308是port号，导致后面设置port时折腾了好久。其实这里的 forked process 和 port 号是两个东西， 这个是程序本身在Server上的进程。 1forked process: 26308 启动mongo shell 12cd /usr/local/mongodb/bin/./mongo 在 mongo shell 中创建管理员及数据库 12345678910111213use admin //admin 数据库db.createUser(&#123;user: &quot;用户名&quot;,pwd:&quot;登陆密码&quot;,roles:[&quot;userAdminAnyDatabase&quot;] //超级管理员&#125;)use databaseFoo //nodeapp 要连接的数据库db.createUser(&#123;user: &quot;用户名&quot;,pwd:&quot;登陆密码&quot;,roles:[&quot;readWrite&quot;] //读写权限&#125;) 到这里 mongodb 基本已经安装设置完成了。具体数据的迁移导入可自行研究。 4.配置及启动node app 我们把 nodeapp 的程序放在 /home 下 1cd /home 我使用 http://git.oschina.net/ 管理代码。它的私有库是免费的。基本操作和 github 一样。复制代码： 1git clone https://git.oschina.net/xxxxxxx/nodeapp.git //你的repo地址 注*同时可以使用图形化程序进行上传如File Zilla进入 nodeapp 文件夹 1cd nodeapp （若后续代码变更，提交到 git repo 后直接git pull即可部署代码）安装nodeapp的所有依赖 1npm install 在启动文件 ( 我的是 app.js ) 中设置数据库连接 1vim app.js 数据库连接类似下面的格式，由于数据库安装在同一服务器，因此 host 为127.0.0.1： 12var dbUrl = &apos;mongodb://用户名:登陆密码@127.0.0.1/databaseFoo&apos;;mongoose.connect(dbUrl) 这里要注意，如果直接 npm start 或 node app.js 启动，则一旦退出 ssh 远程登陆，nodeapp 就会停止运行。因此我们使用 forever 启动 nodeapp。 1NODE_ENV=production forever start app.js 如今可以使用PM2启动程序，步骤如下：使用它要先安装它，用root账号和全局模式安装一下：npm install -g pm2用它来启动程序（在当前目录下可以直接启动）pm2 start app.js --name uops 在蹚过无数坑后，项目部署成功。用浏览器打开 公网IP:端口号 即可看到 nodeapp 的首页","categories":[],"tags":[{"name":"Node.js","slug":"Node-js","permalink":"http://yoursite.com/tags/Node-js/"}]},{"title":"Hello World","slug":"hello-world","date":"2017-03-16T02:04:34.000Z","updated":"2017-03-20T15:00:11.000Z","comments":true,"path":"2017/03/16/hello-world/","link":"","permalink":"http://yoursite.com/2017/03/16/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[{"name":"HelloWorld","slug":"HelloWorld","permalink":"http://yoursite.com/tags/HelloWorld/"}]}]}