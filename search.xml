<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[关于‘==’]]></title>
      <url>/2017/09/05/%E5%85%B3%E4%BA%8E==/</url>
      <content type="html"><![CDATA[<h3 id="相同的数据类型"><a href="#相同的数据类型" class="headerlink" title="相同的数据类型"></a>相同的数据类型</h3><p>在抽象相等的比较中，如果左右两边比较的是同种数据类型的话，那和完全相等的比较规则是相同的：基础类型比较值是否相等，引用类型比较是否引用到同一个对象；</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// false</span>
<span class="token comment" spellcheck="true">// 比较的是两个不同的空数组 和[] === []没有什么不同 都是false</span>
<span class="token operator">+</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">0</span> <span class="token comment" spellcheck="true">// true 0 和 -0 在完全相等中也是返回true</span>
</code></pre>
<blockquote>
<p>特别要注意的：等号运算符（== 和 ===） 不能被用来判断一个值是否是 NaN。必须使用 Number.isNaN() 或 isNaN() 函数。在执行自比较之中：NaN，也只有NaN，比较之中不等于它自己。</p>
</blockquote>
<h3 id="空：null和undefined"><a href="#空：null和undefined" class="headerlink" title="空：null和undefined"></a>空：null和undefined</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">null</span> <span class="token operator">==</span> undefined <span class="token comment" spellcheck="true">// true</span>
</code></pre>
<p>其他任何值与null和undefined比较，都为false</p>
<h3 id="不同基础类型之间的比较-number-string-boolean"><a href="#不同基础类型之间的比较-number-string-boolean" class="headerlink" title="不同基础类型之间的比较(number, string, boolean)"></a>不同基础类型之间的比较(number, string, boolean)</h3><h4 id="number-string"><a href="#number-string" class="headerlink" title="number == string"></a>number == string</h4><p>把string转换为number 等同于：number == ToNumber(string)</p>
<h4 id="number-boolean"><a href="#number-boolean" class="headerlink" title="number == boolean"></a>number == boolean</h4><p>把boolean转换为number 等同于：number == ToNumber(boolean)</p>
<h4 id="string-boolean"><a href="#string-boolean" class="headerlink" title="string == boolean"></a>string == boolean</h4><p>同时转换为number 等同于：ToNumber(string) == ToNumber(boolean)</p>
<blockquote>
<p>总结来说，就是把比较的值全部转为number之后再比较</p>
</blockquote>
<h3 id="引用类型与基础类型之间的比较"><a href="#引用类型与基础类型之间的比较" class="headerlink" title="引用类型与基础类型之间的比较"></a>引用类型与基础类型之间的比较</h3><p>首先会通过内置的toString以及valueOf两种用来转换数据类型的方法，将对象转换为基础数据类型，如果此时两边数据类型相同，可以直接判断，反之用’不同基础类型之间的比较’中的方法继续比较；</p>
<blockquote>
<p>扩展：如何转化为基础类型？<br>在抽象相等的比较规则下，被转化的对象会优先调用valueOf方法(此方法如果不存在则忽略)，如果没有得到基础数据类型，继续调用toString(此方法如果不存在则忽略)，如果仍然没有得到基础数据类型，则报错<br>需要注意的是：如果是Date类型的话，会优先调用toString</p>
</blockquote>
<p>有趣的是，以前在看博客时会有人说使用==会导致数据类型转换，从而影响被比较对象本身的值；然而实际上，只要不擅自修改原型上的toString以及valueOf，就不会对比较对象产生任何影响</p>
<h3 id="但是我们依旧推荐用完全等于"><a href="#但是我们依旧推荐用完全等于" class="headerlink" title="但是我们依旧推荐用完全等于"></a>但是我们依旧推荐用完全等于</h3>]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 坑 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[atom的mac快捷键]]></title>
      <url>/2017/08/31/atom%E7%9A%84mac%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      <content type="html"><![CDATA[<table>
<thead>
<tr>
<th>快捷键</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>cmd + shift + p</td>
<td>打开命令菜单</td>
</tr>
<tr>
<td>cmd + t</td>
<td>模糊搜索工作目录下的文件</td>
</tr>
<tr>
<td>cmt + b</td>
<td>搜索已经打开的文件</td>
</tr>
<tr>
<td>ctrl + 0</td>
<td>焦点移动到文件目录</td>
</tr>
<tr>
<td>cmd + \</td>
<td>隐藏左侧目录树</td>
</tr>
<tr>
<td>ctrl + [</td>
<td>目录中展开结点</td>
</tr>
<tr>
<td>ctrl + ]</td>
<td>目录中缩起结点</td>
</tr>
<tr>
<td>d / a / m</td>
<td>对目录选中的结点进行 删除 / 添加 / 移动</td>
</tr>
<tr>
<td>cmd + f</td>
<td>搜索 当前文件</td>
</tr>
<tr>
<td>cmd + shift + f</td>
<td>搜索 目录</td>
</tr>
<tr>
<td>cmd + shift + r</td>
<td>搜索 tag 前提是安装ctags (brew install ctags)且生成tags (ctags -R src/)</td>
</tr>
<tr>
<td>alt + cmd + [</td>
<td>收起 所在代码块</td>
</tr>
<tr>
<td>alt + cmd + ]</td>
<td>展开 所在代码块</td>
</tr>
<tr>
<td>alt + cmd + shift + [</td>
<td>收起 当前所有代码块</td>
</tr>
<tr>
<td>alt + cmd + shift + ]</td>
<td>展开 当前所有代码块</td>
</tr>
<tr>
<td>cmd + ,</td>
<td>settings</td>
</tr>
<tr>
<td>cmd + k … 方向键</td>
<td>切分面板</td>
</tr>
<tr>
<td>cmd + k … cmd + 方向</td>
<td>切换面板</td>
</tr>
<tr>
<td>cmd + w</td>
<td>关闭当前工作面板</td>
</tr>
<tr>
<td>alt + cmd + 左右</td>
<td>切换tab文件选项卡</td>
</tr>
</tbody>
</table>
]]></content>
      
        <categories>
            
            <category> MAC OS X </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mac小技巧 </tag>
            
            <tag> 日常小技巧 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[日常js开发中的一些小技巧]]></title>
      <url>/2017/08/31/%E6%97%A5%E5%B8%B8js%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<h4 id="生成指定范围内的随机数"><a href="#生成指定范围内的随机数" class="headerlink" title="生成指定范围内的随机数"></a>生成指定范围内的随机数</h4><blockquote>
<p>当我们需要获取指定范围(min, max)内的整数的时候，下面的代码非常适合；这段代码用的还挺多的。</p>
</blockquote>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">setRadomNum</span><span class="token punctuation">(</span>min<span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span>  Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> min<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="json或对象转url参数"><a href="#json或对象转url参数" class="headerlink" title="json或对象转url参数"></a>json或对象转url参数</h4><blockquote>
<p>当我们进行http请求时，可能需要把json或者对象转化为url参数，这时下面这段代码就派上用场了。</p>
</blockquote>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">jsonToUrl</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> json<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> name <span class="token keyword">in</span> json<span class="token punctuation">)</span><span class="token punctuation">{</span>
        arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>json<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">?</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'&amp;'</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="验证是否为数组"><a href="#验证是否为数组" class="headerlink" title="验证是否为数组"></a>验证是否为数组</h4><blockquote>
<p>先检验本地是否有Array.isArray函数，没有就执行后面的方法检测。</p>
</blockquote>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">isArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">||</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object Array]'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="清空数组"><a href="#清空数组" class="headerlink" title="清空数组"></a>清空数组</h4><blockquote>
<p>通过将长度设置为0</p>
</blockquote>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span>length<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="保留指定小数位"><a href="#保留指定小数位" class="headerlink" title="保留指定小数位"></a>保留指定小数位</h4><blockquote>
<p>这个需求在项目中也是很常见的，可以toFixed()方法</p>
</blockquote>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> num <span class="token operator">=</span><span class="token number">3.1415926</span><span class="token punctuation">;</span>
num <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//toFixed()方法可把 Number 四舍五入为指定小数位数的数字，括号里面取值0~20（包括0和20）</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//3.1416</span>
</code></pre>
<h4 id="打乱数组的顺序"><a href="#打乱数组的顺序" class="headerlink" title="打乱数组的顺序"></a>打乱数组的顺序</h4><blockquote>
<p>方式一使用了数组的内置排序方法：sort，而方式二是借助了一个中间量，随机数组里的两个值，让它们交换位置。</p>
</blockquote>
<pre class=" language-javascript"><code class="language-javascript">方式一
arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0.5</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
方式二
<span class="token keyword">function</span> <span class="token function">shuffle</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> i<span class="token punctuation">,</span>
        j<span class="token punctuation">,</span>
        temp<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        j <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用 ==="></a>使用 ===</h4><blockquote>
<p>== (或者 !=) 操作在需要的情况下自动进行了类型转换。=== (或 !==)操作不会执行任何转换。===在比较值和类型时，可以说比==更快。</p>
</blockquote>
<pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">==</span>  <span class="token number">10</span>      <span class="token comment" spellcheck="true">// 为 true</span>
<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">10</span>      <span class="token comment" spellcheck="true">// 为 false</span>
<span class="token string">'10'</span> <span class="token operator">==</span>  <span class="token number">10</span>      <span class="token comment" spellcheck="true">// 为 true</span>
<span class="token string">'10'</span> <span class="token operator">===</span> <span class="token number">10</span>      <span class="token comment" spellcheck="true">// 为 false</span>
 <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token operator">==</span>  <span class="token number">0</span>       <span class="token comment" spellcheck="true">// 为 true</span>
 <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token operator">===</span> <span class="token number">0</span>       <span class="token comment" spellcheck="true">// 为 false</span>
 <span class="token string">''</span>  <span class="token operator">==</span>  <span class="token boolean">false</span>   <span class="token comment" spellcheck="true">// 为 true 但 true == "a" 为false</span>
 <span class="token string">''</span>  <span class="token operator">===</span> <span class="token boolean">false</span>   <span class="token comment" spellcheck="true">// 为 false</span>
</code></pre>
<h4 id="妙用“-amp-amp-”和“-”"><a href="#妙用“-amp-amp-”和“-”" class="headerlink" title="妙用“&amp;&amp;”和“||”"></a>妙用“&amp;&amp;”和“||”</h4><blockquote>
<p>||和&amp;&amp;运算符妙用，可用于精简代码，降低程序的可读性。<br>&amp;&amp;：从左往右依次判断，当当前值为true则继续，为false则返回此值（是返回未转换为布尔值时的原值哦）<br>|| ： 从左往右依次判断，当当前值为false则继续，为true则返回此值（是返回未转换为布尔值时的原值哦）</p>
</blockquote>
<p>用于赋值</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> attr <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> <span class="token string">"aaa"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//aaa;</span>
<span class="token keyword">var</span> attr <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token string">"aaa"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//0</span>
<span class="token keyword">var</span> attr <span class="token operator">=</span> <span class="token number">100</span> <span class="token operator">||</span> <span class="token number">12</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//100</span>
<span class="token keyword">var</span> attr <span class="token operator">=</span> <span class="token string">"e"</span> <span class="token operator">||</span> <span class="token string">"hahaha"</span> <span class="token comment" spellcheck="true">//'e'</span>
<span class="token keyword">var</span> attr <span class="token operator">=</span> <span class="token string">""</span> <span class="token operator">||</span> <span class="token string">"hahaha"</span> <span class="token comment" spellcheck="true">//'hahaha'</span>
</code></pre>
<p>用于条件执行语句</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 普通的if语句</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// 上面的语句可以使用 '&amp;&amp;' 写为：</span>
<span class="token punctuation">(</span> test <span class="token operator">&amp;&amp;</span> <span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
test <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>test<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token function">isFalse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// 上面的语句可以使用 '||' 写为：</span>
<span class="token punctuation">(</span> test <span class="token operator">||</span> <span class="token function">isFalse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>用于多次判断后的赋值</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> add_level <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>add_step <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    add_level <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>add_step <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    add_level <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>add_step <span class="token operator">==</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    add_level <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>add_step <span class="token operator">==</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    add_level <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span> <span class="token punctuation">{</span>
    add_level <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//可以写成</span>
<span class="token keyword">var</span> add_level <span class="token operator">=</span> <span class="token punctuation">(</span>add_step<span class="token operator">==</span><span class="token number">5</span> <span class="token operator">&amp;&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>add_step<span class="token operator">==</span><span class="token number">10</span> <span class="token operator">&amp;&amp;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>add_step<span class="token operator">==</span><span class="token number">12</span> <span class="token operator">&amp;&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>add_step<span class="token operator">==</span><span class="token number">15</span> <span class="token operator">&amp;&amp;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="获取数组中的最大值或最小值"><a href="#获取数组中的最大值或最小值" class="headerlink" title="获取数组中的最大值或最小值"></a>获取数组中的最大值或最小值</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">maxAndMin</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
       max<span class="token punctuation">:</span>Math<span class="token punctuation">.</span>max<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
       min<span class="token punctuation">:</span>Math<span class="token punctuation">.</span>min<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<blockquote>
<p>该方法适合一维或者多维数组。</p>
</blockquote>
<h4 id="随机获取数组里的元素"><a href="#随机获取数组里的元素" class="headerlink" title="随机获取数组里的元素"></a>随机获取数组里的元素</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getRadomFromArr</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> arr<span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="从数组里查找指定的值"><a href="#从数组里查找指定的值" class="headerlink" title="从数组里查找指定的值"></a>从数组里查找指定的值</h4><blockquote>
<p>查到了返回true，没查到返回false。</p>
</blockquote>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">findInArr</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="去除字符串的空格"><a href="#去除字符串的空格" class="headerlink" title="去除字符串的空格"></a>去除字符串的空格</h4><blockquote>
<p>虽然在ECMAScript5中已经实现了trim方法，它对低版本浏览器并不支持，所以有时候我们需要自己实现。</p>
</blockquote>
<p>去除首尾空格</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">trim</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/(^\s*)|(\s*$)/g</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">trim</span><span class="token punctuation">(</span><span class="token string">'  hello world    '</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//"hello world"</span>
</code></pre>
<p>去除所有空格</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">trimAll</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\s+/g</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">trimAll</span><span class="token punctuation">(</span><span class="token string">'   he ll o  wo  r ld    '</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//"helloworld"</span>
</code></pre>
<h4 id="初始化一个指定长度的数组并为每一项赋初值"><a href="#初始化一个指定长度的数组并为每一项赋初值" class="headerlink" title="初始化一个指定长度的数组并为每一项赋初值"></a>初始化一个指定长度的数组并为每一项赋初值</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//num: 数组的长度 item：填充的值 es5方法</span>
<span class="token keyword">function</span> <span class="token function">getArry</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token function">Array</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//使用ES6的fill()方法</span>
<span class="token keyword">function</span> <span class="token function">getArry</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
</code></pre>
<h4 id="数组快速去重"><a href="#数组快速去重" class="headerlink" title="数组快速去重"></a>数组快速去重</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> unique <span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre>
<blockquote>
<p>利用set这种数据结构没有重复项的性质来实现，仅限es6</p>
</blockquote>
<pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> index<span class="token operator">===</span>array<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
`
</code></pre>
<blockquote>
<p>es5方法</p>
</blockquote>
<h4 id="通过正则把数字变成千分位格式"><a href="#通过正则把数字变成千分位格式" class="headerlink" title="通过正则把数字变成千分位格式"></a>通过正则把数字变成千分位格式</h4><blockquote>
<p>展示数据时会经常用到，如果还要格式化小数还可以与toFixed()一起使用</p>
</blockquote>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">thousandBitSeparator</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> num <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/(\d)(?=(\d{3})+\.)/g</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>$<span class="token number">0</span><span class="token punctuation">,</span> $<span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> $<span class="token number">1</span> <span class="token operator">+</span> <span class="token string">','</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/(\d)(?=(\d{3}))/g</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>$<span class="token number">0</span><span class="token punctuation">,</span> $<span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> $<span class="token number">1</span> <span class="token operator">+</span> <span class="token string">','</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="根据对象内某个属性进行排序"><a href="#根据对象内某个属性进行排序" class="headerlink" title="根据对象内某个属性进行排序"></a>根据对象内某个属性进行排序</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//property为根据哪个属性排序，how为true升序false反之</span>
<span class="token keyword">function</span> <span class="token function">objSort</span><span class="token punctuation">(</span>property<span class="token punctuation">,</span> how<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>how<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>property<span class="token punctuation">]</span> <span class="token operator">&lt;</span> b<span class="token punctuation">[</span>property<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>property<span class="token punctuation">]</span> <span class="token operator">></span> b<span class="token punctuation">[</span>property<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>property<span class="token punctuation">]</span> <span class="token operator">&lt;</span> b<span class="token punctuation">[</span>property<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>property<span class="token punctuation">]</span> <span class="token operator">></span> b<span class="token punctuation">[</span>property<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="多维数组拍平去重排序"><a href="#多维数组拍平去重排序" class="headerlink" title="多维数组拍平去重排序"></a>多维数组拍平去重排序</h4><p>常规的多维数组拍平需要递归 这里记录一种简便方法</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> arryNew <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span> s <span class="token operator">=</span><span class="token operator">></span> <span class="token function">Number</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a<span class="token operator">-</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arryNew<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 ]</span>
</code></pre>
<h4 id="在对象中使用for…of遍历器"><a href="#在对象中使用for…of遍历器" class="headerlink" title="在对象中使用for…of遍历器"></a>在对象中使用for…of遍历器</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token string">'sss'</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  bbb <span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  ccc <span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
obj<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">const</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token punctuation">{</span>
            value<span class="token punctuation">:</span> self<span class="token punctuation">[</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            done<span class="token punctuation">:</span> <span class="token boolean">false</span>
          <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token punctuation">{</span> value<span class="token punctuation">:</span> undefined<span class="token punctuation">,</span> done<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> a <span class="token keyword">of</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre>
<blockquote>
<p>通过实现Symbol.iterator定义next方法来实现Iterator</p>
<h4 id="两个数组快速合并"><a href="#两个数组快速合并" class="headerlink" title="两个数组快速合并"></a>两个数组快速合并</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>push<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span>
</code></pre>
<h4 id="简单的深复制的实现"><a href="#简单的深复制的实现" class="headerlink" title="简单的深复制的实现"></a>简单的深复制的实现</h4><p>```javascript<br>function type(obj) {<br>  var toString = Object.prototype.toString;<br>  var map = {<br>      ‘[object Boolean]’  : ‘boolean’,<br>      ‘[object Number]’   : ‘number’,<br>      ‘[object String]’   : ‘string’,<br>      ‘[object Function]’ : ‘function’,<br>      ‘[object Array]’    : ‘array’,<br>      ‘[object Date]’     : ‘date’,<br>      ‘[object RegExp]’   : ‘regExp’,<br>      ‘[object Undefined]’: ‘undefined’,<br>      ‘[object Null]’     : ‘null’,<br>      ‘[object Object]’   : ‘object’<br>  };<br>  if(obj instanceof Element) {<br>        return ‘element’;<br>  }<br>  return map[toString.call(obj)];<br>}<br>function deepClone(data) {<br>  var t = type(data), o, i, ni;</p>
</blockquote>
<p>  if(t === ‘array’) {<br>      o = [];<br>  }else if( t === ‘object’) {<br>      o = {};<br>  }else {<br>      return data;<br>  }</p>
<p>  if(t === ‘array’) {<br>      for (i = 0, ni = data.length; i &lt; ni; i++) {<br>          o.push(deepClone(data[i]));<br>      }<br>      return o;<br>  }else if( t === ‘object’) {<br>      for( i in data) {<br>          o[i] = deepClone(data[i]);<br>      }<br>      return o;<br>  }<br>}<br>```</p>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 日常小技巧 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[macrotask 和 microtask]]></title>
      <url>/2017/08/30/macrotask-%E5%92%8C-microtask/</url>
      <content type="html"><![CDATA[<h4 id="任务队列"><a href="#任务队列" class="headerlink" title="任务队列"></a>任务队列</h4><p>当一个异步操作完成时都可以触发一个回调函数，这个回调函数会放入到一个<strong>任务队列</strong>中，然后等待同步操作完成时再执行<strong>任务队列</strong>中的待被执行的回调函数。</p>
<blockquote>
<p>（1）所有同步任务都在主线程上执行，形成一个执行栈（execution context stack）。<br>（2）主线程之外，还存在一个”任务队列”（task queue）。只要异步任务有了运行结果，就在”任务队列”之中放置一个事件。<br>（3）一旦”执行栈”中的所有同步任务执行完毕，系统就会读取”任务队列”，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。</p>
</blockquote>
<h4 id="两个任务队列"><a href="#两个任务队列" class="headerlink" title="两个任务队列"></a>两个任务队列</h4><p>首先看下面的代码</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">executor</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10000</span> <span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            i <span class="token operator">==</span> <span class="token number">9999</span> <span class="token operator">&amp;&amp;</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>如果是按一个任务队列的方式想的话可能会得到这样的答案：12345；<br>然而实际上是输出：12354；<br>所以看出Promise.resolve()之后then中的方法同样是异步的但是优先于早在第一行代码就进入任务队列中的计时器的回调函数，这是因为任务队列是分为两个：macrotask 和 microtask,而不同的队列的优先级是不同的。</p>
<blockquote>
<p>macrotask：也称为task，包含了script(整体代码),setTimeout, setInterval, setImmediate, I/O, UI rendering<br>microtask：process.nextTick, Promises, Object.observe, MutationObserver</p>
</blockquote>
<p>一个事件循环(EventLoop)中会有一个正在执行的任务(Task)，而这个任务就是从 macrotask 队列中来的。在whatwg规范中有 queue 就是任务队列。当这个 macrotask 执行结束后所有可用的 microtask 将会在同一个事件循环中执行，当这些 microtask 执行结束后还能继续添加 microtask 一直到真个 microtask 队列执行结束。</p>
<p>执行过程如下：</p>
<blockquote>
<p>1、选出macrotask中最早的任务(macrotask中的第一个回调函数)<br>2、如果 macrotask 为null (那任务队列就是空)，跳到第6步<br>3、将 currently running task 设置为 macrotask中的第一个回调函数<br>4、执行回调函数<br>5、将 currently running task 设置为 null 并移出 执行完回调函数<br>6、执行 microtask 队列<br>    a: 在 microtask 中选出最早的任务 task X<br>    b: 如果 task X 为null (那 microtask 队列就是空)，直接跳到 g<br>    c: 将 currently running task 设置为 task X<br>    d: 执行 task X<br>    e: 将 currently running task 设置为 null 并移出 task X<br>    f: 在 microtask 中选出最早的任务 , 跳到 b<br>    g: 结束 microtask 队列<br>跳到第一步</p>
</blockquote>
<p>那么看一下段代码：</p>
<pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'start'</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> interval <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setInterval'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout 1'</span><span class="token punctuation">)</span>
  Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise 3'</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise 4'</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout 2'</span><span class="token punctuation">)</span>
          Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
              <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise 5'</span><span class="token punctuation">)</span>
              <span class="token punctuation">}</span><span class="token punctuation">)</span>
              <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise 6'</span><span class="token punctuation">)</span>
              <span class="token punctuation">}</span><span class="token punctuation">)</span>
              <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
                <span class="token function">clearInterval</span><span class="token punctuation">(</span>interval<span class="token punctuation">)</span>
              <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>

Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise 1'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise 2'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<p>输出：</p>
<pre class=" language-javascript"><code class="language-javascript">start
promise <span class="token number">1</span>
promise <span class="token number">2</span>
setInterval
setTimeout <span class="token number">1</span>
promise <span class="token number">3</span>
promise <span class="token number">4</span>
setInterval
setTimeout <span class="token number">2</span>
promise <span class="token number">5</span>
promise <span class="token number">6</span>
</code></pre>
<p>*注：当首轮执行时，存放在script标签中的就是要执行的代码。</p>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> js异步 </tag>
            
            <tag> 坑 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mac版本的webstorm快捷键]]></title>
      <url>/2017/08/20/Mac%E7%89%88%E6%9C%AC%E7%9A%84webstorm%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      <content type="html"><![CDATA[<p>⌘——Command</p>
<p>⌃ ——Control</p>
<p>⌥——alt</p>
<p>⇧——Shift</p>
<p>⇪——Caps Lock</p>
<p>fn——功能键就是fn</p>
<p>编辑<br>Command+alt+T 用 (if..else, try..catch, for, etc.)包住<br>Command+/ 注释/取消注释的行注释<br>Command+alt+/ 注释/取消注释与块注释<br>alt+↑ 向上选取代码块<br>alt+↓ 向下选取代码块<br>Command+alt+L 格式化代码<br>tab,shift+tab 调整缩进<br>Control+alt+I 快速调整缩进<br>Command+C 复制<br>Command+X 剪切<br>Command+V 粘贴<br>Command+shift+V 从剪贴板里选择粘贴<br>Command+D 复制代码副本<br>Command+delete 删除当前行<br>Control+Shift+J 清除缩进变成单行<br>shift+回车 快速换行<br>Command+回车 换行光标还在原先位置<br>Command+shift+U 大小写转换<br>Command+shift+[,Command+shift+] 文件选项卡快速切换<br>Command+加号,Command+减号 收缩代码块<br>Command+shift+加号，Command+shift+减号 收缩整个文档的代码块<br>Command+W 关闭当前文件选项卡<br>alt+单击 光标在多处定位<br>Control+shift+J 把下面行的缩进收上来<br>shift + F6 高级修改，可快速修改光标所在的标签、变量、函数等<br>alt+/ 代码补全<br>Control+G 选中相同的代码块，可同时编辑</p>
<p>调试<br>Control+alt+R 运行项目<br>Command+Control+R 运行Debug<br>Command+F8 添加断点<br>Command+shift+F8 打开断点列表</p>
<p>导航<br>Command+O 跳转到某个类<br>Command+shift+O 跳转到某个文件<br>Command+alt+O 跳转到某个符号<br>Control+←,Control+→ 转到上/下一个编辑器选项卡<br>F12 打开之前打开的工具窗口（TODO、终端等）<br>Command+L 跳转行<br>Command+E 弹出最近文件<br>Command+alt+←,Command+alt+→ 向前向后导航到代码块交接处（一般是空行处）<br>Command+shift+delete 导航到上一个编辑位置的位置<br>Command+B 跳转到变量声明处<br>Control+J 获取变量相关信息（类型、注释等，注释是拿上一行的注释）<br>Command+Y 小浮窗显示变量声明时的行<br>Command+[,Command+] 光标现在的位置和之前的位置切换<br>Command+F12 文件结构弹出式菜单<br>alt+H 类的层次结构<br>F2,shift+F2 切换到上\下一个突出错误的位置<br>Command+↑ 跳转到导航栏<br>F3 添加书签<br>alt+F3 添加带助记的书签<br>alt+1,alt+2… 切换到相应助记的书签位置<br>Command+F3 打开书签列表</p>
<p>VCS/本地历史记录<br>control+V 打开VST小浮窗<br>Command+K 提交项目<br>Command+T 更新项目<br>alt+shift+C 打开最近修改列表</p>
<p>搜索和替换<br>Command+F 搜索<br>Command+R 替换<br>Command+G 查找下一个<br>Command+shift+G 查找下一个<br>Command+shift+F 按路径搜索<br>Command+shift+R 按路径替换</p>
<p>选中文字的搜索<br>Command+F7 向声明的地方搜索并选中<br>Command+shift+F7 打开搜索框进行搜索<br>Command+alt+F7 打开小浮窗显示搜索列表</p>
<p>对项目文件的操作（重构）<br>F5 复制文件到某个目录<br>F6 移动文件到某个目录<br>Command+delete 安全删除<br>shift+F6 重命名</p>
<p>全局的<br>双击shift 弹出小浮窗搜索所有<br>Command+切换项目 Command+shift+ 反向切换项目<br>Command+shift+A 整个工程的查找操作<br>Command+1,Command+2… 打开各种工具窗口<br>alt+shift+F 把文件添加到收藏夹<br>alt+shift+I 打开项目描述<br>alt+~ 快速切换当前计划<br>Command+, 设置编辑器<br>Control+Tab 选项卡和工具窗口之间进行切换<br>alert+回车 显示npm版本升级列表</p>
]]></content>
      
        <categories>
            
            <category> MAC OS X </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mac小技巧 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js变量的存储]]></title>
      <url>/2017/08/06/js%E5%8F%98%E9%87%8F%E7%9A%84%E5%AD%98%E5%82%A8/</url>
      <content type="html"><![CDATA[<h3 id="两种数据结构"><a href="#两种数据结构" class="headerlink" title="两种数据结构"></a>两种数据结构</h3><p>首先我们需要对两种种数据结构有一个直观的认知。他们分别是堆(heap)与栈(stack)；</p>
<h4 id="栈数据结构"><a href="#栈数据结构" class="headerlink" title="栈数据结构"></a>栈数据结构</h4><p>与C/C++不同，JavaScript中并没有严格意义上区分栈内存与堆内存。因此我们可以粗浅的理解为JavaScript的所有数据都保存在堆内存中。但是在某些场景，我们仍然需要基于堆栈数据结构的思路进行处理，比如JavaScript的执行上下文。执行上下文在逻辑上实现了堆栈(也就是后面我们会经常提到的函数调用栈)。因此理解栈数据结构的原理与特点十分重要。</p>
<h4 id="堆数据结构"><a href="#堆数据结构" class="headerlink" title="堆数据结构"></a>堆数据结构</h4><p>堆数据结构是一种树状结构。它的存取数据的方式，则与书架与书非常相似。<br>书虽然也整齐的存放在书架上，但是我们只要知道书的名字，我们就可以很方便的取出我们想要的书，而不用像从乒乓球盒子里取乒乓一样，非得将上面的所有乒乓球拿出来才能取到中间的某一个乒乓球。好比在JSON格式的数据中，我们存储的key-value是可以无序的，因为顺序的不同并不影响我们的使用，我们只需要关心书的名字。</p>
<h3 id="javascript中的两种数据类型"><a href="#javascript中的两种数据类型" class="headerlink" title="javascript中的两种数据类型"></a>javascript中的两种数据类型</h3><p>首先抛开按值传递或者按引用传递这些名词，从最基本的看起<br>在 javascript 中数据类型可以分为两类：</p>
<blockquote>
<p>原始数据类型值 primitive type：比如Undefined,Null,Boolean,Number,String。<br>引用类型值：也就是对象类型 Object type,比如Object,Array,Function,Date等。</p>
</blockquote>
<h4 id="变量的内存分配"><a href="#变量的内存分配" class="headerlink" title="变量的内存分配"></a>变量的内存分配</h4><p>于不同的数据类型，在声明变量时存在不同的内存分配：</p>
<blockquote>
<p>原始数据类型值：存储在栈（stack）中的简单数据段，也就是说，它们的值直接存储在变量访问的位置。这是因为这些原始类型占据的空间是固定的，所以可将他们存储在较小的内存区域–栈中。这样存储便于迅速查寻变量的值。<br>引用类型值：存储在堆（heap）中的对象，也就是说，存储在变量处的值是一个指针（point），指向存储对象的内存地址。这是因为：引用值的大小会改变，所以不能把它放在栈中，否则会降低变量查寻的速度。相反，放在变量的栈空间中的值是该对象存储在堆中的地址。地址的大小是固定的，所以把它存储在栈中对变量性能无任何负面影响。</p>
</blockquote>
<h4 id="变量的访问方式"><a href="#变量的访问方式" class="headerlink" title="变量的访问方式"></a>变量的访问方式</h4><p>由于不同的内存分配，访问方式也有所不同</p>
<blockquote>
<p>原始数据类型值：可以直接在栈内存中访问到。<br>引用类型值：访问一个引用类型值比如一个数组或者对象时，首先在栈内存得到的是它在堆内存中的地址，然后再按照这个地址去获得这个对象中的值</p>
</blockquote>
<h4 id="变量的复制"><a href="#变量的复制" class="headerlink" title="变量的复制"></a>变量的复制</h4><p>而关于复制变量会有什么不同吗</p>
<blockquote>
<p>原始数据类型值：在将一个保存着原始值的变量复制给另一个变量时，会将原始值的存储在栈内存的值复制一份赋值给新变量，此后这两个变量是完全独立的，他们只是拥有相同的值。<br>引用类型值：在将一个保存着对象内存地址的变量复制给另一个变量时，会把这个内存地址赋值给新变量，也就是说这两个变量都指向了堆内存中的同一个对象，他们中任何一个作出的改变都会反映在另一个身上。</p>
</blockquote>
<p><a href="http://www.jianshu.com/p/996671d4dcc4" target="_blank" rel="external">部分内容摘自</a></p>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mac终端命令[转载]]]></title>
      <url>/2017/06/27/mac%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h4 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h4><table>
<thead>
<tr>
<th>命令名</th>
<th style="text-align:right">功能描述</th>
<th style="text-align:center">使用举例</th>
</tr>
</thead>
<tbody>
<tr>
<td>mkdir</td>
<td style="text-align:right">创建一个目录</td>
<td style="text-align:center">mkdir dirname</td>
</tr>
<tr>
<td>rmdir</td>
<td style="text-align:right">删除一个目录</td>
<td style="text-align:center">rmdir dirname</td>
</tr>
<tr>
<td>mvdir</td>
<td style="text-align:right">移动或重命名一个目录</td>
<td style="text-align:center">mvdir dir1 dir2</td>
</tr>
<tr>
<td>cd</td>
<td style="text-align:right">改变当前目录</td>
<td style="text-align:center">cd dirname</td>
</tr>
<tr>
<td>pwd</td>
<td style="text-align:right">显示当前目录的路径名</td>
<td style="text-align:center">pwd</td>
</tr>
<tr>
<td>ls</td>
<td style="text-align:right">显示当前目录的内容    ls</td>
<td style="text-align:center">-la</td>
</tr>
<tr>
<td>dircmp</td>
<td style="text-align:right">比较两个目录的内容</td>
<td style="text-align:center">dircmp dir1 dir2</td>
</tr>
</tbody>
</table>
<h4 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h4><table>
<thead>
<tr>
<th>命令名</th>
<th style="text-align:right">功能描述</th>
<th style="text-align:center">使用举例</th>
</tr>
</thead>
<tbody>
<tr>
<td>cat</td>
<td style="text-align:right">显示或连接文件</td>
<td style="text-align:center">cat filename</td>
</tr>
<tr>
<td>pg</td>
<td style="text-align:right">分页格式化显示文件内容</td>
<td style="text-align:center">pg filename</td>
</tr>
<tr>
<td>more</td>
<td style="text-align:right">分屏显示文件内容</td>
<td style="text-align:center">more filename</td>
</tr>
<tr>
<td>od</td>
<td style="text-align:right">显示非文本文件的内容</td>
<td style="text-align:center">od -c filename</td>
</tr>
<tr>
<td>cp</td>
<td style="text-align:right">复制文件或目录</td>
<td style="text-align:center">cp file1 file2</td>
</tr>
<tr>
<td>rm</td>
<td style="text-align:right">删除文件或目录</td>
<td style="text-align:center">rm filename</td>
</tr>
<tr>
<td>mv</td>
<td style="text-align:right">改变文件名或所在目录</td>
<td style="text-align:center">mv file1 file2</td>
</tr>
<tr>
<td>ln</td>
<td style="text-align:right">联接文件</td>
<td style="text-align:center">ln -s file1 file2</td>
</tr>
<tr>
<td>find</td>
<td style="text-align:right">使用匹配表达式查找文件</td>
<td style="text-align:center">find . -name “*.c” -print</td>
</tr>
<tr>
<td>file</td>
<td style="text-align:right">显示文件类型</td>
<td style="text-align:center">file filename</td>
</tr>
<tr>
<td>open</td>
<td style="text-align:right">使用默认的程序打开文件</td>
<td style="text-align:center">open filename</td>
</tr>
</tbody>
</table>
<h4 id="选择操作"><a href="#选择操作" class="headerlink" title="选择操作"></a>选择操作</h4><table>
<thead>
<tr>
<th>命令名</th>
<th style="text-align:right">功能描述</th>
<th style="text-align:center">使用举例</th>
</tr>
</thead>
<tbody>
<tr>
<td>head</td>
<td style="text-align:right">显示文件的最初几行</td>
<td style="text-align:center">head -20 filename</td>
</tr>
<tr>
<td>tail</td>
<td style="text-align:right">显示文件的最后几行</td>
<td style="text-align:center">tail -15 filename</td>
</tr>
<tr>
<td>cut</td>
<td style="text-align:right">显示文件每行中的某些域</td>
<td style="text-align:center">cut -f1,7 -d: /etc/passwd</td>
</tr>
<tr>
<td>colrm</td>
<td style="text-align:right">从标准输入中删除若干列</td>
<td style="text-align:center">colrm 8 20 file2</td>
</tr>
<tr>
<td>paste</td>
<td style="text-align:right">横向连接文件</td>
<td style="text-align:center">paste file1 file2</td>
</tr>
<tr>
<td>diff</td>
<td style="text-align:right">比较并显示两个文件的差异</td>
<td style="text-align:center">diff file1 file2</td>
</tr>
<tr>
<td>sed</td>
<td style="text-align:right">非交互方式流编辑器</td>
<td style="text-align:center">sed “s/red/green/g” filename</td>
</tr>
<tr>
<td>grep</td>
<td style="text-align:right">在文件中按模式查找</td>
<td style="text-align:center">grep “^[a-zA-Z]” filename</td>
</tr>
<tr>
<td>awk</td>
<td style="text-align:right">在文件中查找并处理模式</td>
<td style="text-align:center">awk ‘{print $1 $1}’ filename</td>
</tr>
<tr>
<td>sort</td>
<td style="text-align:right">排序或归并文件</td>
<td style="text-align:center">sort -d -f -u file1</td>
</tr>
<tr>
<td>uniq</td>
<td style="text-align:right">去掉文件中的重复行</td>
<td style="text-align:center">uniq file1 file2</td>
</tr>
<tr>
<td>comm</td>
<td style="text-align:right">显示两有序文件的公共和非公共行</td>
<td style="text-align:center">comm file1 file2</td>
</tr>
<tr>
<td>wc</td>
<td style="text-align:right">统计文件的字符数、词数和行数</td>
<td style="text-align:center">wc filename</td>
</tr>
<tr>
<td>nl</td>
<td style="text-align:right">给文件加上行号</td>
<td style="text-align:center">nl file1 &gt;file2</td>
</tr>
</tbody>
</table>
<h4 id="安全操作"><a href="#安全操作" class="headerlink" title="安全操作"></a>安全操作</h4><table>
<thead>
<tr>
<th>命令名</th>
<th style="text-align:right">功能描述</th>
<th style="text-align:center">使用举例</th>
</tr>
</thead>
<tbody>
<tr>
<td>passwd</td>
<td style="text-align:right">修改用户密码</td>
<td style="text-align:center">passwd</td>
</tr>
<tr>
<td>chmod</td>
<td style="text-align:right">改变文件或目录的权限</td>
<td style="text-align:center">chmod ug+x filename</td>
</tr>
<tr>
<td>umask</td>
<td style="text-align:right">定义创建文件的权限掩码</td>
<td style="text-align:center">umask 027</td>
</tr>
<tr>
<td>chown</td>
<td style="text-align:right">改变文件或目录的属主</td>
<td style="text-align:center">chown newowner filename</td>
</tr>
<tr>
<td>chgrp</td>
<td style="text-align:right">改变文件或目录的所属组</td>
<td style="text-align:center">chgrp staff filename</td>
</tr>
<tr>
<td>xlock</td>
<td style="text-align:right">给终端上锁</td>
<td style="text-align:center">xlock -remote</td>
</tr>
</tbody>
</table>
<h4 id="编程操作"><a href="#编程操作" class="headerlink" title="编程操作"></a>编程操作</h4><table>
<thead>
<tr>
<th>命令名</th>
<th style="text-align:right">功能描述</th>
<th style="text-align:center">使用举例</th>
</tr>
</thead>
<tbody>
<tr>
<td>make</td>
<td style="text-align:right">维护可执行程序的最新版本</td>
<td style="text-align:center">make</td>
</tr>
<tr>
<td>touch</td>
<td style="text-align:right">更新文件的访问和修改时间</td>
<td style="text-align:center">touch -m 05202400 filename</td>
</tr>
<tr>
<td>dbx</td>
<td style="text-align:right">命令行界面调试工具</td>
<td style="text-align:center">dbx a.out</td>
</tr>
<tr>
<td>xde</td>
<td style="text-align:right">图形用户界面调试工具</td>
<td style="text-align:center">xde a.out</td>
</tr>
</tbody>
</table>
<h4 id="进程操作"><a href="#进程操作" class="headerlink" title="进程操作"></a>进程操作</h4><table>
<thead>
<tr>
<th>命令名</th>
<th style="text-align:right">功能描述</th>
<th style="text-align:center">使用举例</th>
</tr>
</thead>
<tbody>
<tr>
<td>ps</td>
<td style="text-align:right">显示进程当前状态</td>
<td style="text-align:center">ps u</td>
</tr>
<tr>
<td>kill</td>
<td style="text-align:right">终止进程</td>
<td style="text-align:center">kill -9 30142</td>
</tr>
<tr>
<td>nice</td>
<td style="text-align:right">改变待执行命令的优先级</td>
<td style="text-align:center">nice cc -c *.c</td>
</tr>
<tr>
<td>renice</td>
<td style="text-align:right">改变已运行进程的优先级</td>
<td style="text-align:center">renice +20 32768</td>
</tr>
</tbody>
</table>
<h4 id="时间操作"><a href="#时间操作" class="headerlink" title="时间操作"></a>时间操作</h4><table>
<thead>
<tr>
<th>命令名</th>
<th style="text-align:right">功能描述</th>
<th style="text-align:center">使用举例</th>
</tr>
</thead>
<tbody>
<tr>
<td>date</td>
<td style="text-align:right">显示系统的当前日期和时间</td>
<td style="text-align:center">date</td>
</tr>
<tr>
<td>cal</td>
<td style="text-align:right">显示日历</td>
<td style="text-align:center">cal 8 1996</td>
</tr>
<tr>
<td>time</td>
<td style="text-align:right">统计程序的执行时间</td>
<td style="text-align:center">time a.out</td>
</tr>
</tbody>
</table>
<h4 id="网络与通信操作"><a href="#网络与通信操作" class="headerlink" title="网络与通信操作"></a>网络与通信操作</h4><table>
<thead>
<tr>
<th>命令名</th>
<th style="text-align:right">功能描述</th>
<th style="text-align:center">使用举例</th>
</tr>
</thead>
<tbody>
<tr>
<td>telnet</td>
<td style="text-align:right">远程登录</td>
<td style="text-align:center">telnet hpc.sp.net.edu.cn</td>
</tr>
<tr>
<td>rlogin</td>
<td style="text-align:right">远程登录</td>
<td style="text-align:center">rlogin hostname -l username</td>
</tr>
<tr>
<td>rsh</td>
<td style="text-align:right">在远程主机执行指定命令</td>
<td style="text-align:center">rsh f01n03 date</td>
</tr>
<tr>
<td>ftp</td>
<td style="text-align:right">在本地主机与远程主机之间传输文件</td>
<td style="text-align:center">ftp ftp.sp.net.edu.cn</td>
</tr>
<tr>
<td>rcp</td>
<td style="text-align:right">在本地主机与远程主机 之间复制文件</td>
<td style="text-align:center">rcp file1 host1:file2</td>
</tr>
<tr>
<td>ping</td>
<td style="text-align:right">给一个网络主机发送 回应请求</td>
<td style="text-align:center">ping hpc.sp.net.edu.cn</td>
</tr>
<tr>
<td>mail</td>
<td style="text-align:right">阅读和发送电子邮件</td>
<td style="text-align:center">mail</td>
</tr>
<tr>
<td>write</td>
<td style="text-align:right">给另一用户发送报文</td>
<td style="text-align:center">write username pts/1</td>
</tr>
<tr>
<td>mesg</td>
<td style="text-align:right">允许或拒绝接收报文</td>
<td style="text-align:center">mesg n</td>
</tr>
</tbody>
</table>
<h4 id="Korn-Shell-命令"><a href="#Korn-Shell-命令" class="headerlink" title="Korn Shell 命令"></a>Korn Shell 命令</h4><table>
<thead>
<tr>
<th>命令名</th>
<th style="text-align:right">功能描述</th>
<th style="text-align:center">使用举例</th>
</tr>
</thead>
<tbody>
<tr>
<td>history</td>
<td style="text-align:right">列出最近执行过的 几条命令及编号</td>
<td style="text-align:center">history</td>
</tr>
<tr>
<td>r</td>
<td style="text-align:right">重复执行最近执行过的 某条命令</td>
<td style="text-align:center">r -2</td>
</tr>
<tr>
<td>alias</td>
<td style="text-align:right">给某个命令定义别名</td>
<td style="text-align:center">alias del=rm -i</td>
</tr>
<tr>
<td>unalias</td>
<td style="text-align:right">取消对某个别名的定义</td>
<td style="text-align:center">unalias del</td>
</tr>
</tbody>
</table>
<h4 id="其它命令"><a href="#其它命令" class="headerlink" title="其它命令"></a>其它命令</h4><table>
<thead>
<tr>
<th>命令名</th>
<th style="text-align:right">功能描述</th>
<th style="text-align:center">使用举例</th>
</tr>
</thead>
<tbody>
<tr>
<td>uname</td>
<td style="text-align:right">显示操作系统的有关信息</td>
<td style="text-align:center">uname -a</td>
</tr>
<tr>
<td>clear</td>
<td style="text-align:right">清除屏幕或窗口内容</td>
<td style="text-align:center">clear</td>
</tr>
<tr>
<td>env</td>
<td style="text-align:right">显示当前所有设置过的环境变量</td>
<td style="text-align:center">env</td>
</tr>
<tr>
<td>who</td>
<td style="text-align:right">列出当前登录的所有用户</td>
<td style="text-align:center">who</td>
</tr>
<tr>
<td>whoami</td>
<td style="text-align:right">显示当前正进行操作的用户名</td>
<td style="text-align:center">whoami</td>
</tr>
<tr>
<td>tty</td>
<td style="text-align:right">显示终端或伪终端的名称</td>
<td style="text-align:center">tty</td>
</tr>
<tr>
<td>stty</td>
<td style="text-align:right">显示或重置控制键定义</td>
<td style="text-align:center">stty -a</td>
</tr>
<tr>
<td>du</td>
<td style="text-align:right">查询磁盘使用情况</td>
<td style="text-align:center">du -k subdir</td>
</tr>
<tr>
<td>df</td>
<td style="text-align:right">显示文件系统的总空间和可用空间</td>
<td style="text-align:center">df /tmp</td>
</tr>
<tr>
<td>w</td>
<td style="text-align:right">显示当前系统活动的总信息</td>
<td style="text-align:center">w</td>
</tr>
</tbody>
</table>
<p><a href="http://www.jianshu.com/p/3291de46f3ff" target="_blank" rel="external">原文链接</a></p>
]]></content>
      
        <categories>
            
            <category> MAC OS X </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mac使用技巧 </tag>
            
            <tag> shell </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关闭Mac上的Dashboard]]></title>
      <url>/2017/06/26/%E5%85%B3%E9%97%ADMac%E4%B8%8A%E7%9A%84Dashboard/</url>
      <content type="html"><![CDATA[<p>Mac的Dashboard用来显示股票、日历、天气预报等小widget，应该在Leopard时代就有了。可以说是遗迹。不用的话可以关掉。</p>
<p>关闭Dashboard：<br>打开“终端”，输入命令：</p>
<pre><code>defaults write com.apple.dashboard mcx-disabled -boolean YES
</code></pre><p>继续输入命令，重启Dock：</p>
<pre><code>killall Dock
</code></pre><p>如果想再重新开启，则使用下面的命令：</p>
<pre><code>defaults write com.apple.dashboard mcx-disabled -boolean NO
</code></pre><p>继续输入命令，重启Dock：</p>
<pre><code>killall Dock
</code></pre>]]></content>
      
        <categories>
            
            <category> MAC OS X </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mac使用技巧 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[history对象[转载]]]></title>
      <url>/2017/06/20/history%E5%AF%B9%E8%B1%A1/</url>
      <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>浏览器窗口有一个history对象，用来保存浏览历史。<br>如果当前窗口先后访问了三个网址，那么history对象就包括三项，history.length属性等于3。<br>history对象提供了一系列方法，允许在浏览历史之间移动。</p>
<blockquote>
<p>back()：移动到上一个访问页面，等同于浏览器的后退键。 forward()：移动到下一个访问页面，等同于浏览器的前进键。<br>go()：接受一个整数作为参数，移动到该整数指定的页面，比如go(1)相当于forward()，&gt;<br>go(-1)相当于back()。</p>
</blockquote>
<pre class=" language-javascript"><code class="language-javascript">history<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
history<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>如果移动的位置超出了访问历史的边界，以上三个方法并不报错，而是默默的失败。</p>
<p>history.go(0)相当于刷新当前页面。</p>
<pre class=" language-javascript"><code class="language-javascript">history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>常见的“返回上一页”链接，代码如下。</p>
<pre class=" language-javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'backLink'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  window<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>注意，返回上一页时，页面通常是从浏览器缓存之中加载，而不是重新要求服务器发送新的网页。</p>
<h3 id="history-pushState"><a href="#history-pushState" class="headerlink" title="history.pushState()"></a>history.pushState()</h3><p>HTML5为history对象添加了两个新方法，history.pushState()和history.replaceState()，用来在浏览历史中添加和修改记录。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>history <span class="token operator">&amp;&amp;</span> history<span class="token punctuation">.</span>pushState<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// 支持History API</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// 不支持</span>
<span class="token punctuation">}</span>
</code></pre>
<p>上面代码可以用来检查，当前浏览器是否支持History API。如果不支持的话，可以考虑使用Polyfill库<a href="https://github.com/browserstate/history.js/" target="_blank" rel="external">History.js</a><br>history.pushState方法接受三个参数，依次为：</p>
<blockquote>
<p>state：一个与指定网址相关的状态对象，popstate事件触发时，该对象会传入回调函数。如果不需要这个对象，此处可以填null。<br>title：新页面的标题，但是所有浏览器目前都忽略这个值，因此这里可以填null。<br>url：新的网址，必须与当前页面处在同一个域。浏览器的地址栏将显示这个网址。</p>
</blockquote>
<p>假定当前网址是example.com/1.html，我们使用pushState方法在浏览记录（history对象）中添加一个新记录。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> stateObj <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token punctuation">:</span> <span class="token string">'bar'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span>stateObj<span class="token punctuation">,</span> <span class="token string">'page 2'</span><span class="token punctuation">,</span> <span class="token string">'2.html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>添加上面这个新记录后，浏览器地址栏立刻显示example.com/2.html，但并不会跳转到2.html，甚至也不会检查2.html是否存在，它只是成为浏览历史中的最新记录。假定这时你访问了google.com，然后点击了倒退按钮，页面的url将显示2.html，但是内容还是原来的1.html。你再点击一次倒退按钮，url将显示1.html，内容不变。</p>
<p>总之，pushState方法不会触发页面刷新，只是导致history对象发生变化，地址栏会有反应。</p>
<p>如果pushState的url参数，设置了一个新的锚点值（即hash），并不会触发hashchange事件。如果设置了一个跨域网址，则会报错。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 报错</span>
history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">'https://twitter.com/hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>上面代码中，pushState想要插入一个跨域的网址，导致报错。这样设计的目的是，防止恶意代码让用户以为他们是在另一个网站上。</p>
<h3 id="history-replaceState"><a href="#history-replaceState" class="headerlink" title="history.replaceState()"></a>history.replaceState()</h3><p>history.replaceState方法的参数与pushState方法一模一样，区别是它修改浏览历史中当前纪录。</p>
<p>假定当前网页是example.com/example.html。</p>
<pre class=" language-javascript"><code class="language-javascript">history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>page<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">'title 1'</span><span class="token punctuation">,</span> <span class="token string">'?page=1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>page<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">'title 2'</span><span class="token punctuation">,</span> <span class="token string">'?page=2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
history<span class="token punctuation">.</span><span class="token function">replaceState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>page<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">'title 3'</span><span class="token punctuation">,</span> <span class="token string">'?page=3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

history<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">// url显示为http://example.com/example.html?page=1</span>

history<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">// url显示为http://example.com/example.html</span>

history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">// url显示为http://example.com/example.html?page=3</span>
</code></pre>
<h3 id="history-state属性"><a href="#history-state属性" class="headerlink" title="history.state属性"></a>history.state属性</h3><p>history.state属性返回当前页面的state对象。</p>
<pre class=" language-javascript"><code class="language-javascript">history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>page<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">'title 1'</span><span class="token punctuation">,</span> <span class="token string">'?page=1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

history<span class="token punctuation">.</span>state
<span class="token comment" spellcheck="true">// { page: 1 }</span>
</code></pre>
<h3 id="popstate事件"><a href="#popstate事件" class="headerlink" title="popstate事件"></a>popstate事件</h3><p>每当同一个文档的浏览历史（即history对象）出现变化时，就会触发popstate事件。</p>
<p>需要注意的是，仅仅调用pushState方法或replaceState方法 ，并不会触发该事件，只有用户点击浏览器倒退按钮和前进按钮，或者使用JavaScript调用back、forward、go方法时才会触发。另外，该事件只针对同一个文档，如果浏览历史的切换，导致加载不同的文档，该事件也不会触发。</p>
<p>使用的时候，可以为popstate事件指定回调函数。这个回调函数的参数是一个event事件对象，它的state属性指向pushState和replaceState方法为当前URL所提供的状态对象（即这两个方法的第一个参数）。</p>
<pre class=" language-javascript"><code class="language-javascript">window<span class="token punctuation">.</span>onpopstate <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`location: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span> document<span class="token punctuation">.</span>location <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`state: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>state<span class="token punctuation">)</span> <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 或者</span>

window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'popstate'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`location: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span> document<span class="token punctuation">.</span>location <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`state: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>state<span class="token punctuation">)</span> <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>上面代码中的event.state，就是通过pushState和replaceState方法，为当前URL绑定的state对象。</p>
<p>这个state对象也可以直接通过history对象读取。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> currentState <span class="token operator">=</span> history<span class="token punctuation">.</span>state<span class="token punctuation">;</span>
</code></pre>
<p>注意，页面第一次加载的时候，在load事件发生后，Chrome和Safari浏览器（Webkit核心）会触发popstate事件，而Firefox和IE浏览器不会。</p>
<h3 id="URLSearchParams-API"><a href="#URLSearchParams-API" class="headerlink" title="URLSearchParams API"></a>URLSearchParams API</h3><p>URLSearchParams API用于处理URL之中的查询字符串，即问号之后的部分。没有部署这个API的浏览器，可以用<a href="https://github.com/WebReflection/url-search-params" target="_blank" rel="external">url-search-params</a>这个垫片库。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> paramsString <span class="token operator">=</span> <span class="token string">'q=URLUtils.searchParams&amp;topic=api'</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> searchParams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span>paramsString<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>URLSearchParams有以下方法，用来操作某个参数。</p>
<blockquote>
<p>has()：返回一个布尔值，表示是否具有某个参数<br>get()：返回指定参数的第一个值<br>getAll()：返回一个数组，成员是指定参数的所有值<br>set()：设置指定参数<br>delete()：删除指定参数<br>append()：在查询字符串之中，追加一个键值对</p>
</blockquote>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> paramsString <span class="token operator">=</span> <span class="token string">'q=URLUtils.searchParams&amp;topic=api'</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> searchParams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span>paramsString<span class="token punctuation">)</span><span class="token punctuation">;</span>

searchParams<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">'topic'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>
searchParams<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'topic'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// "api"</span>
searchParams<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span><span class="token string">'topic'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ["api"]</span>

searchParams<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// null，注意Firefox返回空字符串</span>
searchParams<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
searchParams<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2</span>

searchParams<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'topic'</span><span class="token punctuation">,</span> <span class="token string">'webdev'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
searchParams<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// "q=URLUtils.searchParams&amp;topic=api&amp;foo=2&amp;topic=webdev"</span>

searchParams<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
searchParams<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [2, 3]</span>

searchParams<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token string">'topic'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
searchParams<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// "q=URLUtils.searchParams&amp;foo=2&amp;foo=3"</span>
</code></pre>
<p>URLSearchParams还有三个方法，用来遍历所有参数。</p>
<blockquote>
<p>keys()：遍历所有参数名<br>values()：遍历所有参数值<br>entries()：遍历所有参数的键值对</p>
</blockquote>
<p>上面三个方法返回的都是Iterator对象。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> searchParams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token string">'key1=value1&amp;key2=value2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">of</span> searchParams<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// key1</span>
<span class="token comment" spellcheck="true">// key2</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> value <span class="token keyword">of</span> searchParams<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// value1</span>
<span class="token comment" spellcheck="true">// value2</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> pair <span class="token keyword">of</span> searchParams<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pair<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span> <span class="token string">', '</span><span class="token operator">+</span> pair<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// key1, value1</span>
<span class="token comment" spellcheck="true">// key2, value2</span>
</code></pre>
<p>在Chrome浏览器之中，URLSearchParams实例本身就是Iterator对象，与entries方法返回值相同。所以，可以写成下面的样子。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> p <span class="token keyword">of</span> searchParams<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>下面是一个替换当前URL的例子。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// URL: https://example.com?version=1.0</span>
<span class="token keyword">var</span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>search<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
params<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'version'</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

window<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">replaceState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>location<span class="token punctuation">.</span>pathname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">?</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>params<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// URL: https://example.com?version=2.0</span>
</code></pre>
<p>URLSearchParams实例可以当作POST数据发送，所有数据都会URL编码。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
params<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'api_key'</span><span class="token punctuation">,</span> <span class="token string">'1234567890'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://example.com/api'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  method<span class="token punctuation">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>
  body<span class="token punctuation">:</span> params
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span>
</code></pre>
<p>DOM的a元素节点的searchParams属性，就是一个URLSearchParams实例。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
a<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">'https://example.com?filter=api'</span><span class="token punctuation">;</span>
a<span class="token punctuation">.</span>searchParams<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'filter'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// "api"</span>
</code></pre>
<p>URLSearchParams还可以与URL接口结合使用。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> foo <span class="token operator">=</span> url<span class="token punctuation">.</span>searchParams<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">'somedefault'</span><span class="token punctuation">;</span>
</code></pre>
<p><a href="http://javascript.ruanyifeng.com/bom/history.html#toc6" target="_blank" rel="external">原文链接</a></p>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> html </tag>
            
            <tag> history </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[css中的伪类和伪元素]]></title>
      <url>/2017/06/14/css%E4%B8%AD%E7%9A%84%E4%BC%AA%E7%B1%BB%E5%92%8C%E4%BC%AA%E5%85%83%E7%B4%A0/</url>
      <content type="html"><![CDATA[<h3 id="什么是伪类什么又是伪元素"><a href="#什么是伪类什么又是伪元素" class="headerlink" title="什么是伪类什么又是伪元素"></a>什么是伪类什么又是伪元素</h3><blockquote>
<p>伪类选择器：和一般的DOM中的元素样式不一样，它并不改变任何DOM内容。只是插入了一些修饰类的元素，这些元素对于用户来说是可见的，但是对于DOM来说不可见。伪类的效果可以通过添加一个实际的类来达到。<br>伪元素选择器：伪元素的效果是需要通过添加一个实际的元素才能达到的。</p>
</blockquote>
<a id="more"></a>
<p>　　简单的来说伪类只是添加了样式，而伪元素则是添加了实际的元素</p>
<h4 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h4><blockquote>
<p>伪类存在的意义是为了通过选择器找到那些不存在与DOM树中的信息以及不能被常规CSS选择器获取到的信息。<br>伪类由一个冒号:开头，冒号后面是伪类的名称和包含在圆括号中的可选参数。<br>任何常规选择器可以再任何位置使用伪类。伪类语法不区别大小写。一些伪类的作用会互斥，另外一些伪类可以同时被同一个元素使用。并且，为了满足用户在操作DOM时产生的DOM结构改变，伪类也可以是动态的。</p>
</blockquote>
<p>　　我们可以用伪类实现这样的功能：<br>　　获取不存在与DOM树中的信息。比如a标签的:link、visited等，这些信息不存在与DOM树结构中，只能通过CSS选择器来获取；<br>　　获取不能被常规CSS选择器获取的信息。比如伪类:target，它的作用是匹配文档(页面)的URI中某个标志符的目标元素，再比如:hover，可以获取到鼠标悬浮之后的样式。</p>
<h4 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h4><blockquote>
<p>伪元素在DOM树中创建了一些抽象元素，这些抽象元素是不存在于文档语言里的（可以理解为html源码）。比如：documen接口不提供访问元素内容的第一个字或者第一行的机制，而伪元素可以使开发者可以提取到这些信息。并且，一些伪元素可以使开发者获取到不存在于源文档中的内容（比如常见的::before,::after）。<br>伪元素的由两个冒号::开头，然后是伪元素的名称。<br>使用两个冒号::是为了区别伪类和伪元素（CSS2中并没有区别）。当然，考虑到兼容性CSS2中已存的伪元素仍然可以使用一个冒号:的语法，但是CSS3中新增的伪元素必须使用两个冒号::。</p>
</blockquote>
<p>　　伪元素创建了一个虚拟容器，这个容器不包含任何DOM元素，但是可以包含内容。另外，开发者还可以为伪元素定制样式。已::first-line为例，它获取了指定元素的第一行内容并且将第一行的内容加入到虚拟容器中。如果通过JavaScript来实现这个逻辑，那么要考虑的因素就太多了，比如制定元素的宽度、字体大小，甚至浮动元素的图文混排等等。一个选择器只能使用一个伪元素，并且伪元素必须处于选择器语句的最后。</p>
<h3 id="before-和-before-有何不同"><a href="#before-和-before-有何不同" class="headerlink" title="::before 和:before 有何不同"></a>::before 和:before 有何不同</h3><p>　　伪元素由双冒号和伪元素名称组成。双冒号是在当前规范中引入的，用于区分伪类和伪元素。不过浏览器需要同时支持旧的已经存在的伪元素写法，比如:first-line、:first-letter、:before、:after等，而新的在CSS3中引入的伪元素则不允许再支持旧的单冒号的写法。<br>　　对于CSS2之前已有的伪元素，比如:before，单冒号和双冒号的写法::before作用是一样的。所以，如果你的网站只需要兼容webkit、firefox、opera等浏览器，建议对于伪元素采用双冒号的写法，如果不得不兼容IE浏览器，还是用CSS2的单冒号写法比较安全。</p>
<h3 id="使用伪元素来制作一个菜单按钮"><a href="#使用伪元素来制作一个菜单按钮" class="headerlink" title="使用伪元素来制作一个菜单按钮"></a>使用伪元素来制作一个菜单按钮</h3><p>先来看一下演示效果<br><img src="https://ooo.0o0.ooo/2017/06/14/5940ea634b647.gif" alt="效果"><br>上一下代码：</p>
<pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>伪元素绘制menu动画<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">
    <span class="token selector"><span class="token class">.menu</span></span><span class="token punctuation">{</span>
        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">48</span>px<span class="token punctuation">;</span>
        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">48</span>px<span class="token punctuation">;</span>
        <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>
        <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>
        <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
        <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#D9D7D6</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token selector"><span class="token class">.center</span></span><span class="token punctuation">{</span>
        <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>
        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">18</span>px<span class="token punctuation">;</span>
        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">2</span>px<span class="token punctuation">;</span>
        <span class="token property">background-color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>
        <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">4</span>px<span class="token punctuation">;</span>
        <span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span>
        <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>
        <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>
        <span class="token property">margin-top</span><span class="token punctuation">:</span> -<span class="token number">1</span>px<span class="token punctuation">;</span>
        <span class="token property">margin-left</span><span class="token punctuation">:</span> -<span class="token number">9</span>px<span class="token punctuation">;</span>
        <span class="token property">transition</span><span class="token punctuation">:</span> transform <span class="token number">.3</span>s ease, left <span class="token number">.3</span>s ease, top <span class="token number">.3</span>s ease,bottom <span class="token number">.3</span>s ease,width <span class="token number">.3</span>s ease<span class="token punctuation">;</span>
        <span class="token property">-webkit-transition</span><span class="token punctuation">:</span> transform <span class="token number">.3</span>s ease, left <span class="token number">.3</span>s ease, top <span class="token number">.3</span>s ease,bottom <span class="token number">.3</span>s ease,width <span class="token number">.3</span>s ease<span class="token punctuation">;</span>
        <span class="token property">-moz-transition</span><span class="token punctuation">:</span>transform transform <span class="token number">.3</span>s ease, left <span class="token number">.3</span>s ease, top <span class="token number">.3</span>s ease,bottom <span class="token number">.3</span>s ease,width <span class="token number">.3</span>s ease<span class="token punctuation">;</span>
        <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">3</span>px<span class="token punctuation">;</span>
        <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token selector"><span class="token class">.center</span><span class="token pseudo-element">::before</span></span><span class="token punctuation">{</span>
        <span class="token property">content</span><span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">;</span>
        <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>
        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">18</span>px<span class="token punctuation">;</span>
        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">2</span>px<span class="token punctuation">;</span>
        <span class="token property">background-color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>
        <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">4</span>px<span class="token punctuation">;</span>
        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
        <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token property">top</span><span class="token punctuation">:</span> -<span class="token number">5</span>px<span class="token punctuation">;</span>
        <span class="token property">transition</span><span class="token punctuation">:</span> transform <span class="token number">.3</span>s ease, left <span class="token number">.3</span>s ease, top <span class="token number">.3</span>s ease,bottom <span class="token number">.3</span>s ease,width <span class="token number">.3</span>s ease<span class="token punctuation">;</span>
        <span class="token property">-webkit-transition</span><span class="token punctuation">:</span> transform <span class="token number">.3</span>s ease, left <span class="token number">.3</span>s ease, top <span class="token number">.3</span>s ease,bottom <span class="token number">.3</span>s ease,width <span class="token number">.3</span>s ease<span class="token punctuation">;</span>
        <span class="token property">-moz-transition</span><span class="token punctuation">:</span>transform transform <span class="token number">.3</span>s ease, left <span class="token number">.3</span>s ease, top <span class="token number">.3</span>s ease,bottom <span class="token number">.3</span>s ease,width <span class="token number">.3</span>s ease<span class="token punctuation">;</span>
        <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">3</span>px<span class="token punctuation">;</span>
        <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token selector"><span class="token class">.center</span><span class="token pseudo-element">::after</span></span><span class="token punctuation">{</span>
        <span class="token property">content</span><span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">;</span>
        <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>
        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">18</span>px<span class="token punctuation">;</span>
        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">2</span>px<span class="token punctuation">;</span>
        <span class="token property">background-color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>
        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
        <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token property">bottom</span><span class="token punctuation">:</span> -<span class="token number">5</span>px<span class="token punctuation">;</span>
        <span class="token property">transition</span><span class="token punctuation">:</span> transform <span class="token number">.3</span>s ease, left <span class="token number">.3</span>s ease, top <span class="token number">.3</span>s ease,bottom <span class="token number">.3</span>s ease,width <span class="token number">.3</span>s ease<span class="token punctuation">;</span>
        <span class="token property">-webkit-transition</span><span class="token punctuation">:</span> transform <span class="token number">.3</span>s ease, left <span class="token number">.3</span>s ease, top <span class="token number">.3</span>s ease,bottom <span class="token number">.3</span>s ease,width <span class="token number">.3</span>s ease<span class="token punctuation">;</span>
        <span class="token property">-moz-transition</span><span class="token punctuation">:</span>transform transform <span class="token number">.3</span>s ease, left <span class="token number">.3</span>s ease, top <span class="token number">.3</span>s ease,bottom <span class="token number">.3</span>s ease,width <span class="token number">.3</span>s ease<span class="token punctuation">;</span>
        <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">3</span>px<span class="token punctuation">;</span>
        <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token selector"><span class="token class">.back</span></span><span class="token punctuation">{</span>
        <span class="token property">transform</span><span class="token punctuation">:</span><span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">180</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token selector"><span class="token class">.back</span><span class="token pseudo-element">::after</span></span><span class="token punctuation">{</span>
        <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-<span class="token number">45</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">13</span>px<span class="token punctuation">;</span>
        <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">8</span>px<span class="token punctuation">;</span>
        <span class="token property">bottom</span><span class="token punctuation">:</span> -<span class="token number">4</span>px<span class="token punctuation">;</span>        
    <span class="token punctuation">}</span>
    <span class="token selector"><span class="token class">.back</span><span class="token pseudo-element">::before</span></span><span class="token punctuation">{</span>
        <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">45</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">13</span>px<span class="token punctuation">;</span>
        <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">8</span>px<span class="token punctuation">;</span>
        <span class="token property">top</span><span class="token punctuation">:</span> -<span class="token number">4</span>px<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
&lt;a href="javascript:void(0)"class="menu">
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://cdn.bootcss.com/jquery/3.2.1/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    'use strict'
    let menu = $(".center");
    $(".menu").on("click",(e)=>{
        if(menu.hasClass("back")){
            menu.removeClass("back");
        }else{
            menu.addClass("back");
        }
        e.stopPropagation();
           e.preventDefault();
    })
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
</code></pre>
<p>　　大概思路就是用一个span标签构成菜单按钮三个横杆的中间一个，然后通过伪元素来为这个span标签增加上下两个剩余的横杆，并且使用绝对定位来布局。<br>　　至于变成箭头就是在写一个箭头样式的类通过js动态加到原来的按钮上了，箭头样式同样使用了伪元素，只是在之前的基础上改了角度和位置以及长度就好了。</p>
]]></content>
      
        <categories>
            
            <category> css </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
            <tag> 伪类和伪元素 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[解决浏览器跨域-JSONP]]></title>
      <url>/2017/06/12/%E8%A7%A3%E5%86%B3%E6%B5%8F%E8%A7%88%E5%99%A8%E8%B7%A8%E5%9F%9F-JSONP/</url>
      <content type="html"><![CDATA[<h3 id="什么是跨域"><a href="#什么是跨域" class="headerlink" title="什么是跨域"></a>什么是跨域</h3><blockquote>
<p> 当协议、子域名、主域名、端口号中任意一各不相同时，都算不同的“域”。</p>
<p>不同的域之间相互请求资源，就叫“跨域”</p>
</blockquote>
<p>　　如果需要使用AJAX请求其他域名下的请求，会出现拒绝访问的情况，这是因为基于安全的考虑，即浏览器的同源策略，AJAX只能访问本地的资源，而不能跨域访问。<br><a id="more"></a></p>
<h3 id="同源策略限制"><a href="#同源策略限制" class="headerlink" title="同源策略限制"></a>同源策略限制</h3><blockquote>
<p>同源策略阻止从一个域上加载的脚本获取或操作另一个域上的文档属性。也就是说，受到请求的 URL 的域必须与当前 Web页面的域相同。这意味着浏览器隔离来自不同源的内容，以防止它们之间的操作。这个浏览器策略很旧，从 Netscape Navigator 2.0 版本开始就存在。</p>
</blockquote>
<h3 id="如何解决跨域问题"><a href="#如何解决跨域问题" class="headerlink" title="如何解决跨域问题"></a>如何解决跨域问题</h3><p>　　克服该限制的一个相对简单的方法是让 Web 页面向它源自的 Web 服务器请求数据，并且让 Web 服务器像代理一样将请求转发给真正的第三方服务器。尽管该技术获得了普遍使用，但它是不可伸缩的。另一种方式是使用框架要素在当前 Web 页面中创建新区域，并且使用 GET 请求获取任何第三方资源。不过，获取资源后，框架中的内容会受到同源策略的限制。</p>
<p>　　克服该限制更理想方法是在 Web 页面中插入动态脚本元素，该页面源指向其他域中的服务 URL 并且在自身脚本中获取数据。脚本加载时它开始执行。该方法是可行的，因为同源策略不阻止动态脚本插入，并且将脚本看作是从提供 Web 页面的域上加载的。但如果该脚本尝试从另一个域上加载文档，就不会成功。幸运的是，通过添加 JavaScript Object Notation (JSON) 可以改进该技术。</p>
<p>　　还有一种方式是XHR2：“XHR2” 全称 “XMLHttpRequest Level2” 是HTML5提供的方法，对跨域访问提供了很好的支持，并且还有一些新的功能。解决跨域问题只需要在服务器端头部加上下面两句代码：</p>
<pre><code>header( &quot;Access-Control-Allow-Origin:*&quot; );
header( &quot;Access-Control-Allow-Methods:POST,GET&quot; );
</code></pre><h3 id="使用JSONP来解决跨域问题"><a href="#使用JSONP来解决跨域问题" class="headerlink" title="使用JSONP来解决跨域问题"></a>使用JSONP来解决跨域问题</h3><p>　　Ajax直接请求普通文件存在跨域无权限访问的问题，因为同源策略，是跨域的文件都访问不到，但是前面已经提到，同源策略不阻止将动态脚本元素插入文档中。也就是说，可以动态插入来自不同域的 JavaScript，并且可以在这些域中都携带我们所需要跨域的 JSON 数据。这其实是真正的 JSONP（JSON with Padding）：打包在函数调用中的 JSON 数据。</p>
<h3 id="JSONP在客户端的具体实现"><a href="#JSONP在客户端的具体实现" class="headerlink" title="JSONP在客户端的具体实现"></a>JSONP在客户端的具体实现</h3><p>　　远程服务器remoteserver.com根目录下有个remote.js文件代码如下：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token function">localHandler</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"result"</span><span class="token punctuation">:</span><span class="token string">"我是远程js带来的数据"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>　　本地服务器localserver.com下有个jsonp.html页面代码如下：</p>
<pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    var localHandler = function(data){
        alert('我是本地函数，可以被跨域的remote.js文件调用，远程js带来的数据是：' + data.result);
    };
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://remoteserver.com/remote.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
</code></pre>
<p>　　运行之后，页面成功弹出提示窗口。<br>　　上面的例子是最简单的JSONP的实现模型，不过它还算不上一个真正的JSONP服务。我们来看一下真正的JSONP服务是怎么样的，比如Google的ajax搜索接口：<br><code>http://ajax.googleapis.com/ajax/services/search/web?v=1.0&amp;q=?&amp;callback=?</code><br>q=?这个问号是表示你要搜索的内容，最重要的是第二个callback=?这个是正如其名表示回调函数的名称，也就是将你自己在客户端定义的回调函数的函数名传送给服务端，服务端则会返回以你定义的回调函数名的方法，将获取的json数据传入这个方法完成回调：</p>
<pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    // 得到航班信息查询结果后的回调函数
    var flightHandler = function(data){
        alert('你查询的航班结果是：票价 ' + data.price + ' 元，' + '余票 ' + data.tickets + ' 张。');
    };
    // 提供jsonp服务的url地址（不管是什么类型的地址，最终生成的返回值都是一段javascript代码）
    var url = "http://flightQuery.com/jsonp/flightResult.aspx?code=CA1998&amp;callback=flightHandler";
    // 创建script标签，设置其属性
    var script = document.createElement('script');
    script.setAttribute('src', url);
    // 把script标签加入head，此时调用开始
    document.getElementsByTagName('head')[0].appendChild(script);
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
</code></pre>
<p>　　这次的代码变化比较大，不再直接把远程js文件写死，而是编码实现动态查询，而这也正是jsonp客户端实现的核心部分。<br>　　我们看到调用的url中传递了一个code参数，告诉服务器我要查的是CA1998次航班的信息，而callback参数则告诉服务器，我的本地回调函数叫做flightHandler，所以请把查询结果传入这个函数中进行调用。<br>　　flightResult.aspx的页面生成了一段这样的代码提供给jsonp.html：
　　</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token function">flightHandler</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token string">"code"</span><span class="token punctuation">:</span> <span class="token string">"CA1998"</span><span class="token punctuation">,</span>
    <span class="token string">"price"</span><span class="token punctuation">:</span> <span class="token number">1780</span><span class="token punctuation">,</span>
    <span class="token string">"tickets"</span><span class="token punctuation">:</span> <span class="token number">5</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>　　传递给flightHandler函数的是一个json，描述了航班的基本信息。运行页面，成功弹出提示窗口。</p>
<h3 id="JSONP和Ajax"><a href="#JSONP和Ajax" class="headerlink" title="JSONP和Ajax"></a>JSONP和Ajax</h3><blockquote>
<p>　　jsonp不是ajax的一个特例，他们是不同的技术</p>
</blockquote>
<p>　　ajax和jsonp这两种技术在调用方式上“看起来”很像，目的也一样，都是请求一个url，然后把服务器返回的数据进行处理，因此jquery和ext等框架都把jsonp作为ajax的一种形式进行了封装；<br>　　但ajax和jsonp其实本质上是不同的东西。ajax的核心是通过XmlHttpRequest获取非本页内容，而jsonp的核心则是动态添加script标签来调用服务器提供的js脚本。<br>　　所以说，其实ajax与jsonp的区别不在于是否跨域，ajax通过服务端代理一样可以实现跨域，jsonp本身也不排斥同域的数据的获取。<br>　　还有就是，jsonp是一种方式或者说非强制性协议，如同ajax一样，它也不一定非要用json格式来传递数据，如果愿意，字符串都行，只不过这样不利于用jsonp提供公开服务。</p>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> 跨域 </tag>
            
            <tag> JSONP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS中常用的几种循环]]></title>
      <url>/2017/06/08/JS%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E5%87%A0%E7%A7%8D%E5%BE%AA%E7%8E%AF/</url>
      <content type="html"><![CDATA[<blockquote>
<p>说到遍历，在Javascript中可能第一个想到的是for循环的方法，这可以视为一种十分简单易懂，并且十分高效的方法来进行遍历；但是在javascript中，却又有很多种用来遍历数组，或者类似数组的对象（array-like-object）甚至可遍历（iterable）的对象（比如generator）</p>
</blockquote>
<h3 id="从最基本的for循环说起"><a href="#从最基本的for循环说起" class="headerlink" title="从最基本的for循环说起"></a>从最基本的for循环说起</h3><p>如何写一个高效并且拥有块级作用域的for循环？</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>len<span class="token operator">=</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    XXXXXX<span class="token comment" spellcheck="true">//你要操作的部分</span>
<span class="token punctuation">}</span>
</code></pre>
<p>为什么用let？这样和用var有什么不同？如果有这样的疑问可以<a href="https://wohugb.gitbooks.io/ecmascript-6/content/docs/let.html" target="_blank" rel="external">查看这篇文章</a></p>
<h3 id="只有数组才能使用的遍历"><a href="#只有数组才能使用的遍历" class="headerlink" title="只有数组才能使用的遍历"></a>只有数组才能使用的遍历</h3><h4 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h4><p>代码如下:</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
    XXXXXX<span class="token comment" spellcheck="true">//你要操作的部分</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<p>数组自带的foreach循环，使用频率较高，实际上性能比普通for循环弱，<strong>并且没有返回值</strong></p>
<h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><p>map和forEach唯一的不同是map有返回值，所以就可以对每一项进行某些py操作再return出来：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> ary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">42</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  
<span class="token keyword">let</span> res <span class="token operator">=</span> ary<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>input<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  
    <span class="token keyword">return</span> item<span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span><span class="token punctuation">)</span>  
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>这样区别就一目了然了吧<br>回调函数的语法如下所示：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">callbackfn</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span>
</code></pre>
<p>value:数组元素的值。<br>index:数组元素的数字索引。<br>array:包含该元素的数组对象</p>
<p>还有一些ES6新增的方法，但是并不怎么常用可以点击查看<a href="https://wohugb.gitbooks.io/ecmascript-6/content/docs/array.html" target="_blank" rel="external">ES6新增方法</a></p>
<h3 id="类似数组的对象可以使用的方法"><a href="#类似数组的对象可以使用的方法" class="headerlink" title="类似数组的对象可以使用的方法"></a>类似数组的对象可以使用的方法</h3><h4 id="for…in…"><a href="#for…in…" class="headerlink" title="for…in…"></a>for…in…</h4><p>for in是遍历键名</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>a <span class="token keyword">in</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1,2</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="for…of…"><a href="#for…of…" class="headerlink" title="for…of…"></a>for…of…</h4><p>for of是遍历键值，并且是ES6的新特性</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>a <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//a,b</span>
<span class="token punctuation">}</span>
</code></pre>
<p>由于for of的这个特性，还可以实现对iterator对象的遍历，然而for in就是简单的遍历了</p>
<h3 id="如何使数组的方法使用到非数组对象上"><a href="#如何使数组的方法使用到非数组对象上" class="headerlink" title="如何使数组的方法使用到非数组对象上"></a>如何使数组的方法使用到非数组对象上</h3><blockquote>
<p>Array.from()用于将两类对象转为真正的数组：类似数组的对象（array-like<br>object）和可遍历（iterable）的对象，其中包括ES6新增的Set和Map结构。</p>
</blockquote>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> dom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>dom<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>querySelectorAll方法返回的是一个类似数组的对象，只有将这个对象转为真正的数组，才能使用forEach方法。</p>
<p>所以如何选择就要看面对什么样的需求了</p>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[async]]></title>
      <url>/2017/06/08/async/</url>
      <content type="html"><![CDATA[<h3 id="什么是async"><a href="#什么是async" class="headerlink" title="什么是async"></a>什么是async</h3><blockquote>
<p>一句话，async 函数就是 Generator 函数的语法糖。</p>
</blockquote>
<p>相对于Generator，有以下的改进：<br><a id="more"></a></p>
<blockquote>
<p>（1）内置执行器。 Generator 函数的执行必须靠执行器，所以才有了 co 函数库，而 async函数自带执行器。也就是说，async 函数的执行，与普通函数一模一样，只要一行。<br>（2）更好的语义。 async 和 await，比起星号和yield，语义更清楚了。async 表示函数里有异步操作，await 表示紧跟在后面的表达式需要等待结果。<br>（3）更广的适用性。 co 函数库约定，yield 命令后面只能是 Thunk 函数或 Promise 对象，而 async 函数的 await 命令后面，可以跟Promise 对象和原始类型的值（数值、字符串和布尔值，但这时等同于同步操作）。</p>
</blockquote>
<h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">resolveAfter2Seconds</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">add1</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">resolveAfter2Seconds</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">resolveAfter2Seconds</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> x <span class="token operator">+</span> <span class="token keyword">await</span> a <span class="token operator">+</span> <span class="token keyword">await</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">add1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// prints 60 after 2 seconds.</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">add2</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">resolveAfter2Seconds</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">resolveAfter2Seconds</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> x <span class="token operator">+</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">add2</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// prints 60 after 4 seconds.</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><p>调用异步函数时会返回一个 promise 对象。当这个异步函数返回一个值时，promise 的 resolve 方法将会处理这个返回值；当异步函数抛出的是异常或者非法值时，promise 的 reject 方法将处理这个异常值。<br>异步函数可能会包括  await 表达式，这将会使异步函数暂停执行并等待 promise 解析传值后，继续执行异步函数并返回解析值。</p>
<h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>我们可以配合 try/catch 来捕获异步操作过程中的问题，包括 Promise 中 reject 的数据。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> f <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
      <span class="token function">reject</span><span class="token punctuation">(</span><span class="token number">234</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> testAsync <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token function">testAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> ES6 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Generator]]></title>
      <url>/2017/06/07/Generator/</url>
      <content type="html"><![CDATA[<h3 id="异步编程问题"><a href="#异步编程问题" class="headerlink" title="异步编程问题"></a>异步编程问题</h3><p>ES6之前，异步编程的问题主要有两个：一个是必须通过回调函数进行返回值的处理，另一个是复杂情况下会造成嵌套过深<a id="more"></a></p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//这是一个Callback Hell！</span>
 <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> catList <span class="token operator">=</span> name <span class="token operator">+</span> <span class="token string">','</span><span class="token punctuation">;</span>

    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      catList <span class="token operator">+</span><span class="token operator">=</span> name <span class="token operator">+</span> <span class="token string">','</span><span class="token punctuation">;</span>

      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        catList <span class="token operator">+</span><span class="token operator">=</span> name <span class="token operator">+</span> <span class="token string">','</span><span class="token punctuation">;</span>

       <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         catList <span class="token operator">+</span><span class="token operator">=</span> name <span class="token operator">+</span> <span class="token string">','</span><span class="token punctuation">;</span>

         <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
           catList <span class="token operator">+</span><span class="token operator">=</span> name<span class="token punctuation">;</span>

           console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>catList<span class="token punctuation">)</span><span class="token punctuation">;</span>

         <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'Lion'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

       <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'Snow Leopard'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

     <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'Lynx'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'Jaguar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'Panther'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="解决方案之一-promise"><a href="#解决方案之一-promise" class="headerlink" title="解决方案之一:promise"></a>解决方案之一:promise</h3><p>所谓 Promise，就是一个对象，用来传递异步操作的消息。它代表了某个未来才会知道结果的事件（通常是一个异步操作），并且这个事件提供统一的 API，可供进一步处理。<br>当然，promise固然是一个很好的可以解决回调地狱的方案，但是今天却要说的是ES6中，另外一个可以用来处理回调函数的方案：generator，当然，generator的用处不仅仅在此</p>
<h3 id="generator"><a href="#generator" class="headerlink" title="generator"></a>generator</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><blockquote>
<p>所谓Generator，有多种理解角度。首先，可以把它理解成一个函数的内部状态的遍历器，每调用一次，函数的内部状态发生一次改变（可以理解成发生某些事件）。ES6引入Generator函数，作用就是可以完全控制函数的内部状态的变化，依次遍历这些状态。<br>在形式上，Generator是一个普通函数，但是有两个特征。一是，function命令与函数名之间有一个星号；二是，函数体内部使用yield语句，定义遍历器的每个成员，即不同的内部状态（yield语句在英语里的意思就是“产出”）。<br>当调用Generator函数的时候，该函数并不执行，而是返回一个遍历器（可以理解成暂停执行）。以后，每次调用这个遍历器的next方法，就从函数体的头部或者上一次停下来的地方开始执行（可以理解成恢复执行），直到遇到下一个yield语句为止。也就是说，next方法就是在遍历yield语句定义的内部状态。<br><strong>—–摘自ECMAScript 6入门</strong></p>
</blockquote>
<p>按照我的理解，你甚至可以把generator想象成一个数组，数组里的每个元素就是你要操作的函数，这个数组里有一个指针，你可以自己自由的控制这个指针何时指向并且指向下一个“元素”，当然，你也可以遍历这个数组，来让它一个个的执行每一个“元素”</p>
<p>说了这么多，下面是一个最简单的generator的例子：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">helloWorldGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">yield</span> <span class="token string">'hello'</span><span class="token punctuation">;</span>
  <span class="token keyword">yield</span> <span class="token string">'world'</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token string">'ending'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> hw <span class="token operator">=</span> <span class="token function">helloWorldGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//*是generator的特征，但是看起来很别扭</span>
</code></pre>
<p>那么如何一步步的执行这个函数呢：</p>
<pre class=" language-javascript"><code class="language-javascript">hw<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// { value: 'hello', done: false }</span>

hw<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// { value: 'world', done: false }</span>

hw<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// { value: 'ending', done: true }</span>

hw<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// { value: undefined, done: true }</span>
</code></pre>
<blockquote>
<p>上面代码一共调用了四次next方法。</p>
<p>第一次调用，函数开始执行，直到遇到第一句yield语句为止。next方法返回一个对象，它的value属性就是当前yield语句的值hello，done属性的值false，表示遍历还没有结束。</p>
<p>第二次调用，函数从上次yield语句停下的地方，一直执行到下一个yield语句。next方法返回的对象的value属性就是当前yield语句的值world，done属性的值false，表示遍历还没有结束。</p>
<p>第三次调用，函数从上次yield语句停下的地方，一直执行到return语句（如果没有return语句，就执行到函数结束）。next方法返回的对象的value属性，就是紧跟在return语句后面的表达式的值（如果没有return语句，则value属性的值为undefined），done属性的值true，表示遍历已经结束。</p>
<p>第四次调用，此时函数已经运行完毕，next方法返回对象的value属性为undefined，done属性为true。以后再调用next方法，返回的都是这个值。</p>
</blockquote>
<p>所以，如果你不调用next方法，这个函数就被你暂停了。</p>
<blockquote>
<p>yield语句就是暂停标志，next方法遇到yield，就会暂停执行后面的操作，并将紧跟在yield后面的那个表达式的值，作为返回对象的value属性的值。当下一次调用next方法时，再继续往下执行，直到遇到下一个yield语句。如果没有再遇到新的yield语句，就一直运行到函数结束，将return语句后面的表达式的值，作为value属性的值，如果该函数没有return语句，则value属性的值为undefined。</p>
</blockquote>
<p>如果你想要一个单纯的暂缓执行函数，可以不使用yield：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'执行了！'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> generator <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  generator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>ES6新增了一个<a href="https://wohugb.gitbooks.io/ecmascript-6/content/docs/iterator.html" target="_blank" rel="external">iterator接口</a>，我们的generator使用的就是iterator接口，每次调用next方法的返回值，就是一个标准的iterator返回值：value和done</p>
<blockquote>
<p>value是yield语句后面那个表达式的值，done是一个布尔值，表示是否遍历结束</p>
</blockquote>
<h4 id="next方法"><a href="#next方法" class="headerlink" title="next方法"></a>next方法</h4><p>yield语句本身没有返回值，或者说总是返回undefined。next方法可以带一个参数，该参数就会被当作上一个yield语句的返回值。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">foo</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">yield</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//y = 2*12</span>
  <span class="token keyword">let</span> z <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token punctuation">(</span>y <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//z = 13 +5 +24</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> y <span class="token operator">+</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> it <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">// { value:6, done:false }</span>
it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">// { value:8, done:false }</span>
it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">// { value:42, done:true }</span>
</code></pre>
<p>上面代码第一次调用next方法时，返回x+1的值6；第二次调用next方法，将上一次yield语句的值设为12，因此y等于24，返回y / 3的值8；第三次调用next方法，将上一次yield语句的值设为13，因此z等于13，这时x等于5，y等于24，所以return语句的值等于42。</p>
<blockquote>
<p>注意，由于next方法的参数表示上一个yield语句的返回值，所以<strong>第一次使用next方法时，不能带有参数</strong>。</p>
</blockquote>
<h4 id="如何遍历generator"><a href="#如何遍历generator" class="headerlink" title="如何遍历generator"></a>如何遍历generator</h4><p>刚刚我们说到generator中使用iterator接口，所以我们可以使用for…of循环可以自动遍历Generator函数，且此时不再需要调用next方法。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">yield</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">yield</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token keyword">yield</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token keyword">yield</span> <span class="token number">4</span><span class="token punctuation">;</span>
  <span class="token keyword">yield</span> <span class="token number">5</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">6</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> v <span class="token keyword">of</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// 1 2 3 4 5</span>
</code></pre>
<p>为什么没有最后return出来的6？说好的遍历呢？</p>
<blockquote>
<p>这里需要注意，一旦next方法的返回对象的done属性为true，for…of循环就会中止，且不包含该返回对象，所以上面代码的return语句返回的6，不包括在for…of循环之中。</p>
</blockquote>
<p>我们知道，只有在后边没有yield，并且执行完毕遇到return时才会将done的值变为true，那么上一段代码中，yield 5和return中间如果有需要执行的代码时会不会执行呢：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">yield</span> <span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token keyword">yield</span> <span class="token number">2</span><span class="token punctuation">;</span>
      <span class="token keyword">yield</span> <span class="token number">3</span><span class="token punctuation">;</span>
      <span class="token keyword">yield</span> <span class="token number">4</span><span class="token punctuation">;</span>
      <span class="token keyword">yield</span> <span class="token number">5</span><span class="token punctuation">;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"滑稽"</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token number">6</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> v <span class="token keyword">of</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>结果可想而知：</p>
<pre><code>1
2
3
4
5
滑稽
</code></pre><h4 id="在generator中嵌套一个generator"><a href="#在generator中嵌套一个generator" class="headerlink" title="在generator中嵌套一个generator"></a>在generator中嵌套一个generator</h4><blockquote>
<p>如果yield命令后面跟的是一个generator，需要在yield命令后面加上星号，表明它返回的是一个generator。这被称为yield<em>语句。<br>```javascript<br>let delegatedIterator = (function</em> () {<br>  yield ‘Hello!’;<br>  yield ‘Bye!’;<br>}());</p>
</blockquote>
<p>let delegatingIterator = (function<em> () {<br>  yield ‘Greetings!’;<br>  yield</em> delegatedIterator;<br>  yield ‘Ok, bye.’;<br>}());</p>
<p>for(let value of delegatingIterator) {<br>  console.log(value);<br>}<br>// “Greetings!<br>// “Hello!”<br>// “Bye!”<br>// “Ok, bye.”</p>
<pre><code>上面代码中，delegatingIterator是代理者，delegatedIterator是被代理者。由于yield* delegatedIterator语句得到的值，是一个遍历器，所以要用星号表示。运行结果就是使用一个遍历器，遍历了多个Genertor函数，有递归的效果。
如果yield*后面跟着一个数组，就表示该数组会返回一个遍历器，因此就会遍历数组成员。
```javascript
function* gen(){
      yield* [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;];
      return
    }
    let i = gen()
    for(let v of i){
        console.log(v)
    }
</code></pre><h4 id="遇到异常怎么办？"><a href="#遇到异常怎么办？" class="headerlink" title="遇到异常怎么办？"></a>遇到异常怎么办？</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre>
<p>将我们觉得会出错的代码放到try中，这样即可抛出异常了</p>
<h4 id="不能当构造器使用"><a href="#不能当构造器使用" class="headerlink" title="不能当构造器使用"></a>不能当构造器使用</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">f</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// throws "TypeError: f is not a constructor"</span>
</code></pre>
<h4 id="MDN上对generator的定义"><a href="#MDN上对generator的定义" class="headerlink" title="MDN上对generator的定义"></a>MDN上对generator的定义</h4><p>感觉有点乱？最后看一下MDN上对generator的解释吧：</p>
<blockquote>
<p>生成器函数（generator）在执行时能中途退出，后面又能重新进入继续执行。而且在函数内定义的变量的状态都会保留，不受中途退出的影响。</p>
<p>调用一个生成器函数并不会马上执行它里面的语句，而是返回一个这个生成器的迭代器（iterator）对象。当这个迭代器的 next()<br>方法被首次（后续）调用时，其内的语句会执行到第一个（后续）出现yield表达式的位置为止，该表达式定义了迭代器要返回的值，或者被<br>yield*委派至另一个生成器函数。next()方法返回一个对象，这个对象包含两个属性：value 和 done，value 属性表示本次<br>yield 表达式的返回值，done 属性为布尔类型，表示生成器是否已经产出了它最后的值，即生成器函数是否已经返回。</p>
<p>调用 next() 方法时，如果传入了参数，那么这个参数会取代生成器函数中对应执行位置的 yield 表达式（整个表达式被这个值替换）</p>
<p>当在生成器函数中显式 return 时，会导致生成器立即变为完成状态，即调用 next() 方法返回的对象的 done 为 true。如果<br>return 了一个值，那么这个值会作为下次调用 next() 方法返回的 value 值。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> ES6 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[本站性能优化测试以及Http安全报告]]></title>
      <url>/2017/05/18/%E6%9C%AC%E7%AB%99%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%BB%A5%E5%8F%8AHttp%E5%AE%89%E5%85%A8%E6%8A%A5%E5%91%8A/</url>
      <content type="html"><![CDATA[<p>本站在性能优化以及http安全方面终于勉强及格了…果然生命在于折腾<em>(:</em>」∠)_<br><img src="https://ooo.0o0.ooo/2017/05/23/5923df6e69d19.png" alt="性能优化"></p>
<blockquote>
<p>本站性能优化测试，<del>因为使用了Cache-Control所以没有用较旧的Expires，故YSlow的分数较低</del>忍不住还是把分数刷上去了<em>(:</em>」∠)_</p>
</blockquote>
<p><img src="https://ooo.0o0.ooo/2017/05/22/5922e90b95d0f.png" alt="20170518152955403.png"></p>
<blockquote>
<p>本站Http安全报告，其中HSTS Preloaded仍然在审核中。</p>
</blockquote>
<p>断断续续折腾了半个月，终于把这几项测试从一开始的黄色甚至红色提升到了绿色，小小的满足了一下我的强迫症，其中还有一些琐碎的坑要继续填，以后也会写一些我是如何提升我的网站性能以及和http相关的博客。</p>
<p>最后附上两个测试网站网址：<br><a href="https://gtmetrix.com" target="_blank" rel="external">网站性能优化测试</a><br><a href="https://httpsecurityreport.com" target="_blank" rel="external">Http安全报告</a></p>
]]></content>
      
        <categories>
            
            <category> 日常 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> http安全 </tag>
            
            <tag> 网站性能优化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学会使用ES6的箭头函数]]></title>
      <url>/2017/05/16/%E5%AD%A6%E4%BC%9A%E4%BD%BF%E7%94%A8ES6%E7%9A%84%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<blockquote>
<p>箭头函数表达式的语法比函数表达式短，并且不绑定自己的 this，arguments，super或 new.target。<br>此外，箭头函数最好在非方法函数中使用，且不能用作构造函数。</p>
</blockquote>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">(</span>param1<span class="token punctuation">,</span> param2<span class="token punctuation">,</span> …<span class="token punctuation">,</span> paramN<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> statements <span class="token punctuation">}</span>
<span class="token punctuation">(</span>param1<span class="token punctuation">,</span> param2<span class="token punctuation">,</span> …<span class="token punctuation">,</span> paramN<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> expression <span class="token comment" spellcheck="true">// 等价于:  => { return expression; } </span>

<span class="token comment" spellcheck="true">// 如果只有一个参数，圆括号是可选的:</span>
<span class="token punctuation">(</span>singleParam<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> statements <span class="token punctuation">}</span>
singleParam <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> statements <span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 无参数或者多参数的箭头函数需要使用圆括号或者下划线:</span>
<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> statements <span class="token punctuation">}</span> _ <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> statements <span class="token punctuation">}</span>
</code></pre>
<h4 id="来看看和ES5的对比吧"><a href="#来看看和ES5的对比吧" class="headerlink" title="来看看和ES5的对比吧"></a>来看看和ES5的对比吧</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ES5</span>
<span class="token keyword">var</span> selected <span class="token operator">=</span> allJobs<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>job<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> job<span class="token punctuation">.</span><span class="token function">isSelected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// ES6</span>
<span class="token keyword">var</span> selected <span class="token operator">=</span> allJobs<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>job <span class="token operator">=</span><span class="token operator">></span> job<span class="token punctuation">.</span><span class="token function">isSelected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>这是只有一个参数的情况，如果要写一个接受多重参数（也可能没有参数，或者是不定参数、默认参数、参数解构）的函数，你需要用小括号包裹参数list。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ES5</span>
<span class="token keyword">var</span> total <span class="token operator">=</span> values<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// ES6</span>
<span class="token keyword">var</span> total <span class="token operator">=</span> values<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a <span class="token operator">+</span> b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="高级语法"><a href="#高级语法" class="headerlink" title="高级语法"></a>高级语法</h4><p>并且支持 Rest parameters 和 default parameters以及参数列表中的解构赋值</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 支持 Rest parameters 和 default parameters:</span>
<span class="token punctuation">(</span>param1<span class="token punctuation">,</span> param2<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> statements <span class="token punctuation">}</span>
<span class="token punctuation">(</span>param1 <span class="token operator">=</span> defaultValue1<span class="token punctuation">,</span> param2<span class="token punctuation">,</span> …<span class="token punctuation">,</span> paramN <span class="token operator">=</span> defaultValueN<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> statements <span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 支持参数列表中的解构赋值</span>
<span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span> c<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span> a <span class="token operator">+</span> b<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token punctuation">;</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 6</span>
</code></pre>
<p> 只返回一个对象字面量,没有其他语句时, 应当用圆括号将其包起来:</p>
<pre><code>params =&gt; ({foo: bar})
</code></pre><h3 id="使用箭头函数需要注意的地方"><a href="#使用箭头函数需要注意的地方" class="headerlink" title="使用箭头函数需要注意的地方"></a>使用箭头函数需要注意的地方</h3><h4 id="this值"><a href="#this值" class="headerlink" title="this值"></a>this值</h4><blockquote>
<p>普通function函数和箭头函数的行为有一个微妙的区别，箭头函数没有它自己的this值，箭头函数内的this值继承自外围作用域。</p>
</blockquote>
<h5 id="在没有箭头函数的ES5中"><a href="#在没有箭头函数的ES5中" class="headerlink" title="在没有箭头函数的ES5中"></a>在没有箭头函数的ES5中</h5><p>首先看这段代码：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// 构造函数 Person() 定义的 `this` 就是新实例对象自己</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">growUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 在非严格模式下，growUp() 函数定义了其内部的 `this`为全局对象, </span>
      <span class="token function">不同于构造函数Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>的定义的 <span class="token template-string"><span class="token string">`this`</span></span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">++</span><span class="token punctuation">;</span> 
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>在 ES5 中，通常把this的值赋给一个变量，然后将该变量放到闭包中来解决：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 也有人选择使用 `that` 而非 `self`. </span>
                   <span class="token comment" spellcheck="true">// 只要保证一致就好.</span>
  self<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">growUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 回调里面的 `self` 变量就指向了期望的那个对象了</span>
    self<span class="token punctuation">.</span>age<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>当然，还可以使用 bind ，把期望的 this 值传递给函数。</p>
<h5 id="在ES6中"><a href="#在ES6中" class="headerlink" title="在ES6中"></a>在ES6中</h5><p>箭头函数会在外围作用域获得this 值，因此下面的代码就完成了这个问题。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// this正确地指向了person对象</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<blockquote>
<p>考虑到 this 是词法层面上的，严格模式中与 this 相关的规则都将被忽略。</p>
</blockquote>
<h5 id="箭头函数和call-与apply"><a href="#箭头函数和call-与apply" class="headerlink" title="箭头函数和call()与apply()"></a>箭头函数和call()与apply()</h5><p>看看下面的程序会输出什么样的结果：</p>
<pre class=" language-javascript"><code class="language-javascript">  <span class="token keyword">var</span> adder <span class="token operator">=</span> <span class="token punctuation">{</span>
        base <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>

        add <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">var</span> f <span class="token operator">=</span> v <span class="token operator">=</span><span class="token operator">></span> v <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>base<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>

        addThruCall<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">var</span> f <span class="token operator">=</span> v <span class="token operator">=</span><span class="token operator">></span> v <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>base<span class="token punctuation">;</span>
            <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">{</span>
                base <span class="token punctuation">:</span> <span class="token number">2</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>

            <span class="token keyword">return</span> f<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>

        addAnotherCall<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
             <span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
             <span class="token keyword">return</span> v <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>base<span class="token punctuation">;</span>
             <span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">{</span>
                base <span class="token punctuation">:</span> <span class="token number">2</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>

            <span class="token keyword">return</span> f<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>adder<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>adder<span class="token punctuation">.</span><span class="token function">addThruCall</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>adder<span class="token punctuation">.</span><span class="token function">addAnotherCall</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>由于 this 已经在词法层面完成了绑定，通过 call() 或 apply() 方法调用一个函数时，只是传入了参数而已，对 this 并没有什么影响，所以会输出如下结果：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token number">2</span>
<span class="token number">2</span>
<span class="token number">3</span>
</code></pre>
<h4 id="不支持arguments对象"><a href="#不支持arguments对象" class="headerlink" title="不支持arguments对象"></a>不支持arguments对象</h4><p>箭头函数不会在其内部暴露出arguments ：arguments.length, arguments[0], arguments[1] 等等，都不会指向箭头函数的 arguments，而是指向了箭头函数所在作用域的一个名为 arguments 的值，当然是如果有的情况，否则，就是 undefined。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arguments <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> arguments<span class="token punctuation">;</span>

<span class="token function">arr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 40 </span>

<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// foo函数的间接参数绑定</span>
  <span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span>
</code></pre>
<p>不过rest参数可以给出一个解决方案：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
  <span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
  <span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>

<span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>
</code></pre>
<h4 id="不能像方法一样使用箭头函数"><a href="#不能像方法一样使用箭头函数" class="headerlink" title="不能像方法一样使用箭头函数"></a>不能像方法一样使用箭头函数</h4><p>箭头函数表达式对非方法函数是最合适的，然而不能把它们作为方法：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  i<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
  b<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>i<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  c<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">.</span>i<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
obj<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined，Window</span>
obj<span class="token punctuation">.</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 10, Object</span>
<span class="token comment" spellcheck="true">//箭头函数中的this指向了Window</span>
</code></pre>
<h4 id="不能使用-new-操作符"><a href="#不能使用-new-操作符" class="headerlink" title="不能使用 new 操作符"></a>不能使用 new 操作符</h4><p>箭头函数不能才当成构造函数，因为和 new 一起用就会抛出错误</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> Foo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// TypeError: Foo is not a constructor</span>
</code></pre>
<h4 id="无原型属性"><a href="#无原型属性" class="headerlink" title="无原型属性"></a>无原型属性</h4><p>箭头函数没有原型属性。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> Foo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Foo<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span>
</code></pre>
<h4 id="返回文字表达式"><a href="#返回文字表达式" class="headerlink" title="返回文字表达式"></a>返回文字表达式</h4><p>用 params =&gt; {object:literal} 这种简单的语法返回一个文字表达式是不行的：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> func <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  foo<span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// undefined!</span>

<span class="token keyword">var</span> func <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  foo<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// SyntaxError: function statement requires a name（未定义函数语句）</span>

<span class="token comment" spellcheck="true">// 所以，记得用圆括号把文字表达式包起来：</span>
<span class="token keyword">var</span> func <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> foo<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions" target="_blank" rel="external">参考文档</a></p>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> ES6 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在服务器上搭建hexo博客]]></title>
      <url>/2017/04/21/%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<blockquote>
<p>随着<a href="https://github.com/moumao/hexo-theme-Vateral" target="_blank" rel="external">Vateral主题</a>的开发接近了尾声，在对主题速度优化的时候发现之前用的githubpage问题多多：首先就是因为在国内的原因，访问速度本身就很慢，曾经有次加载一张16kb的图标时间耗费了26s！！？<a id="more"></a>其次，在对资源做CDN托管加速时，域名是需要备案的，显然githubpage也是做不了的；所以果断舍弃了这个把hexo搭建到了我的<del>阿里云服务器</del>现在是主机壳的香港VPS上</p>
</blockquote>
<p>总体来说还是比把hexo搭建到github上要复杂一些的，期间遇到了不少坑，也参考了很多资料，这里详细的总结一下具体的步骤。</p>
<h3 id="hexo的架构"><a href="#hexo的架构" class="headerlink" title="hexo的架构"></a>hexo的架构</h3><hr>
<p><img src="https://ooo.0o0.ooo/2017/05/23/5923dfcfd2f50.png" alt="搭建hexo.png"></p>
<p>首先我们要理解hexo是如何实现静态博客通过服务器访问的</p>
<blockquote>
<p>通过上图我们可以知道，整个流程就是在本地通过<code>hexo g</code> 渲染博客的静态文件，然后通过<code>hexo d</code> 把静态文件 push到服务器上我们自己创建的git仓库,服务器再通过 git-hooks 同步网站根目录，这样就可以访问了</p>
</blockquote>
<h3 id="搭建流程"><a href="#搭建流程" class="headerlink" title="搭建流程"></a>搭建流程</h3><hr>
<p><strong>第一步：</strong> 安装node.js以及本地Hexo初始化<br><strong>第二步：</strong> 服务器环境搭建，包括安装 Git 、Nginx配置 、创建 git 用户<br><strong>第三步：</strong> 使用Git自动化部署发布博客</p>
<h3 id="本地环境"><a href="#本地环境" class="headerlink" title="本地环境"></a>本地环境</h3><hr>
<h4 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h4><pre><code>$ brew install node
</code></pre><h4 id="初始化Hexo博客"><a href="#初始化Hexo博客" class="headerlink" title="初始化Hexo博客"></a>初始化Hexo博客</h4><p>首先安装 hexo-cli</p>
<pre><code>npm install -g hexo-cli
</code></pre><p>然后创建 你的Hexo目录，然后进入到这个目录</p>
<pre><code>$ mkdir &quot;your hexo dir name&quot;//创建一个自定义的hexo目录，比如我就在用户根目录创建了一个myhexo文件夹（macOS)
$ cd &quot;your hexo dir name&quot;//进入到刚刚创建的目录
//如果是win用户，右键打开git
</code></pre><p>初始化该文件夹</p>
<pre><code>hexo init
</code></pre><p>到这里hexo的本地搭建已经基本结束了，快来新建一个文章并在本地启动吧~</p>
<h4 id="生成自己的第一篇文章"><a href="#生成自己的第一篇文章" class="headerlink" title="生成自己的第一篇文章"></a>生成自己的第一篇文章</h4><p>使用 hexo new &lt;文章名称&gt; 来新建文章，该命令会成成一个 .md文件放置在 sources/_posts文件夹。（<strong>*在hexo目录下执行命令</strong>）</p>
<pre><code>hexo new &quot;hello Hexo&quot;
</code></pre><blockquote>
<p>执行该命令后在hexo目录下的 sources/_posts文件夹里生成了刚刚创建的hello<br>Hexo.md的markdown文件，然后就可以通过本地或者在线的markdown编辑器就可以创作自己的博客了~</p>
</blockquote>
<p>编辑完毕以后， 使用hexo g将 .md文件渲染成静态文件，然后启动hexo-server</p>
<pre><code>hexo g
hexo server
</code></pre><p>打开 <a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> 如果看到 hexo 的初始页面证明安装成功。</p>
<h4 id="生成ssh公钥密钥"><a href="#生成ssh公钥密钥" class="headerlink" title="生成ssh公钥密钥"></a>生成ssh公钥密钥</h4><pre><code>$ cd ~/.ssh
$ ssh-keygen
</code></pre><p>它先要求你确认保存公钥的位置（.ssh/id_rsa），然后它会让你重复一个密码两次，如果不想在使用公钥的时候输入密码，可以留空；具体生产方法可以<a href="https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/" target="_blank" rel="external">参考这里</a></p>
<blockquote>
<p>这个公钥将会复制到服务器的证书中，添加公钥之后可以防止每次 push 都输入密码。</p>
</blockquote>
<p>至此，本地环境的搭建已经基本结束。</p>
<h3 id="服务器环境搭建"><a href="#服务器环境搭建" class="headerlink" title="服务器环境搭建"></a>服务器环境搭建</h3><hr>
<h4 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h4><p>因为我们是拿nginx做 Web 服务器，所以我们需要安装部署好nginx，如果没有安装，推荐使用<a href="https://lnmp.org/install.html" target="_blank" rel="external">LNMP一键安装包</a></p>
<blockquote>
<p>我们可以专门为hexo创建一个部署目录，比如我创建了/home/www/hexo文件夹，并把nginx的配置文件nginx.conf中的部署目录改为/home/www/hexo，配置文件一般在/usr/local/nginx/conf里；同样可以使用默认目录，nginx的默认目录为/var/www/html，如果使用LNMP一键安装包，则默认的部署目录为/home/wwwroot/default</p>
</blockquote>
<h4 id="安装node-js-1"><a href="#安装node-js-1" class="headerlink" title="安装node.js"></a>安装node.js</h4><pre><code>$ curl -sL https://deb.nodesource.com/setup_4.x | sudo -E bash -
$ apt-get install -y nodejs
</code></pre><blockquote>
<p>如果遇到问题可以参考<a href="https://www.moumaobuchiyu.com/2017/03/16/nodejs%E9%83%A8%E7%BD%B2%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91%E5%85%A8%E8%BF%87%E7%A8%8B/">Node.js部署到阿里云服务器</a>里边有更详细的关于node.js的步骤</p>
</blockquote>
<h4 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h4><pre><code>$ apt-get install git
</code></pre><h4 id="创建一个git用户"><a href="#创建一个git用户" class="headerlink" title="创建一个git用户"></a>创建一个git用户</h4><pre><code>$ sudo adduser git
</code></pre><blockquote>
<p>虽说现在的仓库只有我们自己在使用，新建一个 git 用户显得不是很有必要，但是为了安全起见，还是建议使用单独的 git 用户来专门运行<br>git 服务</p>
</blockquote>
<h4 id="添加证书登录"><a href="#添加证书登录" class="headerlink" title="添加证书登录"></a>添加证书登录</h4><p>把刚在在本地创建或者已经拥有的公钥，也就是 ~/.ssh/id_rsa.pub 文件里的内容添加到服务器的 /home/git/.ssh/authorized_keys 文件中，如上所说，添加公钥之后可以防止每次 push 都输入密码。（*可以直接执行<code>cat ~/.ssh/id_rsa.pub | pbcopy</code> 复制）</p>
<p>###初始化 Git 仓库<br>可以将git仓库放到自定义位置，我是将其放在 /var/repo/blog.git 目录下的</p>
<pre><code>$ sudo mkdir /var/repo
$ cd /var/repo
$ sudo git init --bare blog.git
</code></pre><p>使用 –bare 参数，Git 就会创建一个裸仓库，裸仓库没有工作区，我们不会在裸仓库上进行操作，它只为共享而存在。</p>
<h4 id="配置-git-hooks"><a href="#配置-git-hooks" class="headerlink" title="配置 git hooks"></a>配置 git hooks</h4><blockquote>
<p>我们这里要使用的是 post-receive 的 hook，这个 hook 会在整个 git 操作过程完结以后被运行，关于 hooks<br>的详情内容可以<a href="https://git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-Git-%E9%92%A9%E5%AD%90" target="_blank" rel="external">参考这里</a>。</p>
</blockquote>
<p>在 blog.git/hooks 目录下新建一个 post-receive 文件</p>
<pre><code>$ cd /var/repo/blog.git/hooks
</code></pre><p>编辑这个文件</p>
<pre><code>$ vim post-receive
</code></pre><p>在 post-receive 文件中写入如下内容</p>
<pre><code>#!/bin/sh
git --work-tree=/home/www/hexo --git-dir=/var/repo/blog.git checkout -f
</code></pre><blockquote>
<p>注意，/home/www/hexo 要换成你自己的部署目录，正如上文所说，我是的配置目录是/home/www/hexo。/var/repo/blog.git是git仓库的位置。上面那句 git 命令可以在我们每次 push 完之后，把部署目录更新到博客的最新生成状态。这样便可以完成达到自动部署的目的了。</p>
</blockquote>
<p>设置这个文件的可执行权限</p>
<pre><code>chmod +x post-receive
</code></pre><h4 id="改变-blog-git-目录的拥有者为-git-用户"><a href="#改变-blog-git-目录的拥有者为-git-用户" class="headerlink" title="改变 blog.git 目录的拥有者为 git 用户"></a>改变 blog.git 目录的拥有者为 git 用户</h4><pre><code>$ sudo chown -R git:git blog.git
</code></pre><h4 id="禁用-git-用户的-shell-登录权限"><a href="#禁用-git-用户的-shell-登录权限" class="headerlink" title="禁用 git 用户的 shell 登录权限"></a>禁用 git 用户的 shell 登录权限</h4><p>出于安全考虑，我们要让 git 用户不能通过 shell 登录。可以编辑 /etc/passwd 来实现</p>
<pre><code>vim /etc/passwd
</code></pre><p>将</p>
<pre><code>git:x:1001:1001:,,,:/home/git:/bin/bash
</code></pre><p>改成</p>
<pre><code>git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell
</code></pre><p>这样 git 用户可以通过 ssh 正常使用 git，但是无法登录 sehll。</p>
<p>至此，服务器环境的搭建已经基本结束。</p>
<h3 id="配置本地-config-yml文件-完成自动化部署"><a href="#配置本地-config-yml文件-完成自动化部署" class="headerlink" title="配置本地_config.yml文件,完成自动化部署"></a>配置本地_config.yml文件,完成自动化部署</h3><hr>
<h4 id="现在配置-hexo-的-deploy。"><a href="#现在配置-hexo-的-deploy。" class="headerlink" title="现在配置 hexo 的 deploy。"></a>现在配置 hexo 的 deploy。</h4><p>修改 hexo 目录下的 _config.yml 找到 deploy, 修改为：</p>
<pre><code>deploy:
type: git
repo: git@www.moumaobuchiyu.com:/var/repo/blog.git
branch: master
</code></pre><blockquote>
<p>repo 的地址为你自己的地址以及 git 仓库目录</p>
</blockquote>
<p>至此，我们的 hexo 自动部署已经全部配置好了</p>
<h4 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h4><p>新建文章：</p>
<pre><code>$ hexo new &quot;post name&quot;
</code></pre><p>生成 &amp; 部署：</p>
<pre><code>$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo d
</code></pre><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.viosey.com/2016/10/05/Install-hexo-vps-git/" target="_blank" rel="external">在 VPS 上搭建 Hexo 博客，使用 Git 部署</a><br><a href="https://segmentfault.com/a/1190000005723321" target="_blank" rel="external">阿里云VPS搭建自己的的Hexo博客</a><br><a href="http://www.swiftyper.com/2016/04/17/deploy-hexo-with-git-hook/" target="_blank" rel="external">使用 Git Hook 自动部署 Hexo 到个人 VPS</a><br><a href="http://sumyblog.me/2015/11/02/use-git-hooks-for-hexo-automatic-deployment/" target="_blank" rel="external">使用git hooks进行hexo博客自动化部署</a></p>
]]></content>
      
        <categories>
            
            <category> hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[大学算是毕业了]]></title>
      <url>/2017/04/18/%E5%A4%A7%E5%AD%A6%E7%AE%97%E6%98%AF%E6%AF%95%E4%B8%9A%E4%BA%86/</url>
      <content type="html"><![CDATA[<p>上了两年多大学，现在算是基本毕业了吧<br>现在被学校忽悠到什么杰普软件公司培训几个月<br>还是培训JavaEE。。。。<br>折腾了几天才安顿到苏州附近的昆山<br>到这里的两天更新了友链和摄影界面</p>
<p>这里的环境不错，适合跑步</p>
]]></content>
      
        <categories>
            
            <category> 日常 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 杰普 </tag>
            
            <tag> 浦东软件园 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[历经半个月 终于用上了自己开发的hexo主题]]></title>
      <url>/2017/04/11/%E5%8E%86%E7%BB%8F%E5%8D%8A%E4%B8%AA%E6%9C%88-%E7%BB%88%E4%BA%8E%E7%94%A8%E4%B8%8A%E4%BA%86%E8%87%AA%E5%B7%B1%E5%BC%80%E5%8F%91%E7%9A%84hexo%E4%B8%BB%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>填了半个月的坑，终于用上了自己开发的hexo主题–vateral<br>在这之间接触hexo这个框架不到一周的时间，并且使用了vio喵的material主题<br>很喜欢这个主题的风格，也就有了开发自己主题的打算<br>这也是为什么vateral中在样式上会有些material的影子<br>熬了几次夜，终于这个主题实现了一些基本的功能，其中遇到了好多问题，也一点点解决了，而且不得不说还把新买的电脑的键盘敲坏了….<br>不过想想一开始的样子，心里还是蛮欣慰的，填坑中也学到了不少东西，然而主题还没有正式发布到hexo的主题里边，有文档要写，服务器还要配置环境，还要修改bug，和更多功能的开发。</p>
<blockquote>
<p>主题初始的样式</p>
</blockquote>
<p><img src="https://ooo.0o0.ooo/2017/05/22/5922f08e8ab7c.jpeg" alt="初始样式"></p>
<p>没过几天就要去上海培训了，打算最近完善好主题并且更新到1.0.0的正式版，以及发布到hexo的官方主题文档上。<br>不知道会不会有人用这个主题23333，毕竟接触hexo这个博客框架的人还不多<br>别说博文少哦，时间都拿去开发博客了，还有主题的样式和布局大部分也是自己设计的，不要嫌弃丑啊哈哈</p>
]]></content>
      
        <categories>
            
            <category> 日常 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo主题 </tag>
            
            <tag> vateral </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[meta标签总结]]></title>
      <url>/2017/04/05/meta%E6%A0%87%E7%AD%BE%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><blockquote>
<p>meta 元素可提供有关页面的元信息（meta-information），比如针对搜索引擎和更新频度的描述和关键词。</p>
</blockquote>
<p>以上是w3c上的解释。元信息，是用来描述数据的数据，也就是用来描述当前页面的一些信息。例如：定义页面的说明，关键字、作者等等。</p>
<h2 id="包含的属性"><a href="#包含的属性" class="headerlink" title="包含的属性"></a>包含的属性</h2><p><strong>1.name属性</strong></p>
<p>name 属性提供了名称/值对中的名称（而后面要说的content属性则是该名称对应的值）。假如我们把页面想象成一个我们生活中的实物的话，拿个人简历来作类比，诸如姓名、性别、籍贯、技能、项目经验等等这些都可以看做是个人简历的name属性，content属性相当于这些名称对应的值。</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>名称<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>具体的描述<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
</code></pre>
<p><strong>2.content属性</strong></p>
<p>content 属性提供了名称/值对中的值。该值可以是任何有效的字符串。<br>content 属性始终要和 name 属性或 http-equiv 属性一起使用。</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>名称<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>具体的描述<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
</code></pre>
<p><strong>3.http-equiv属性</strong></p>
<p>equiv是equivalent的简写，是相等的，等价物的意思。不难理解，相当于http的文件头作用，它可以向浏览器传回一些有用的信息，以帮助正确和精确地显示网页内容，与之对应的属性值为content，content中的内容其实就是各个参数的变量值。</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>名称<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>具体的描述<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
</code></pre>
<h2 id="常用的标签"><a href="#常用的标签" class="headerlink" title="常用的标签"></a>常用的标签</h2><p>使用 HTML5 doctype，不区分大小写。</p>
<pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span> //使用 HTML5 doctype，不区分大小写
</code></pre>
<p>声明文档使用的字符编码</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  //旧的HTML，不推荐
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> //HTML5设定网页字符集的方式，推荐使用UTF-8
</code></pre>
<p>renderer(双核浏览器渲染方式)</p>
<blockquote>
<p>说明：renderer是为双核浏览器准备的，用于指定双核浏览器默认以何种方式渲染页面。比如说360浏览器。</p>
</blockquote>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>renderer<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>webkit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> //默认webkit内核
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>renderer<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie-comp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> //默认IE兼容模式
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>renderer<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie-stand<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> //默认IE标准模式
```html
X-UA-Compatible(浏览器采取何种版本渲染当前页面)

> 说明：用于告知浏览器以何种版本来渲染页面。（一般都设置为最新模式，在各大框架中这个设置也很常见。）

```html
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge,chrome<span class="token punctuation">=</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> 
//指定IE和Chrome使用最新版本渲染当前页面
</code></pre>
<p>refresh(自动刷新并指向某页面)</p>
<blockquote>
<p>说明：网页将在设定的时间内，自动刷新并调向设定的网址。</p>
</blockquote>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Refresh<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5;url<span class="token punctuation">=</span>http://www.w3school.com.cn<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> //5秒后重定向到w3c官网
</code></pre>
<p><strong>SEO 优化</strong></p>
<p>页面描述</p>
<blockquote>
<p>每个网页都应有一个不超过 150 个字符且能准确反映网页内容的描述标签</p>
</blockquote>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>不超过150个字符<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 页面描述 --></span>
</code></pre>
<p>页面关键词</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>keywords<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 页面关键词 --></span>
</code></pre>
<p>定义页面标题</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
</code></pre>
<p>定义网页作者</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name, email@gmail.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 网页作者 --></span>
</code></pre>
<p>定义网页搜索引擎索引方式，robotterms是一组使用英文逗号「,」分割的值，通常有如下几种取值：none，noindex，nofollow，all，index和follow。</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>robots<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index,follow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 搜索引擎抓取 --></span>
</code></pre>
<p>为移动设备添加 viewport</p>
<pre class=" language-html"><code class="language-html">&lt;meta name ="viewport" content ="initial-scale=1, maximum-scale=3, minimum-scale=1, user-scalable=no">
</code></pre>
<p><a href="http://bigc.at/ios-webapp-viewport-meta.orz" target="_blank" rel="external">width=device-width 会导致 iPhone 5 添加到主屏后以 WebApp 全屏模式打开页面时出现黑边</a></p>
<blockquote>
<p>content 参数：</p>
<p>width viewport 宽度(数值/device-width) height viewport<br>高度(数值/device-height) initial-scale 初始缩放比例 maximum-scale 最大缩放比例<br>minimum-scale 最小缩放比例 user-scalable 是否允许用户缩放(yes/no) minimal-ui <em>iOS<br>7.1 beta 2</em> 中新增属性（<em>注意：iOS8 中已经删除</em>），可以在页面加载时最小化上下状态栏。这是一个布尔值，可以直接这样写：<meta name="viewport" content="width=device-width, initial-scale=1, minimal-ui"></p>
</blockquote>
<h2 id="以及一些其他的标签"><a href="#以及一些其他的标签" class="headerlink" title="以及一些其他的标签"></a>以及一些其他的标签</h2><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 声明文档使用的字符编码 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>utf-8<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>
<span class="token comment" spellcheck="true">&lt;!-- 优先使用 IE 最新版本和 Chrome --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge,chrome<span class="token punctuation">=</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token comment" spellcheck="true">&lt;!-- 页面描述 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>不超过150个字符<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token comment" spellcheck="true">&lt;!-- 页面关键词 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>keywords<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token comment" spellcheck="true">&lt;!-- 网页作者 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name, email@gmail.com<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token comment" spellcheck="true">&lt;!-- 搜索引擎抓取 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>robots<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index,follow<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token comment" spellcheck="true">&lt;!-- 为移动设备添加 viewport --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>initial-scale<span class="token punctuation">=</span>1, maximum-scale<span class="token punctuation">=</span>3, minimum-scale<span class="token punctuation">=</span>1, user-scalable<span class="token punctuation">=</span>no<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token comment" spellcheck="true">&lt;!-- `width=device-width` 会导致 iPhone 5 添加到主屏后以 WebApp 全屏模式打开页面时出现黑边 http://bigc.at/ios-webapp-viewport-meta.orz --></span>

<span class="token comment" spellcheck="true">&lt;!-- iOS 设备 begin --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>apple-mobile-web-app-title<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>标题<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token comment" spellcheck="true">&lt;!-- 添加到主屏后的标题（iOS 6 新增） --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>apple-mobile-web-app-capable<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>yes<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token comment" spellcheck="true">&lt;!-- 是否启用 WebApp 全屏模式，删除苹果默认的工具栏和菜单栏 --></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>apple-itunes-app<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app-id<span class="token punctuation">=</span>myAppStoreID, affiliate-data<span class="token punctuation">=</span>myAffiliateData, app-argument<span class="token punctuation">=</span>myURL<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token comment" spellcheck="true">&lt;!-- 添加智能 App 广告条 Smart App Banner（iOS 6+ Safari） --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>apple-mobile-web-app-status-bar-style<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>black<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token comment" spellcheck="true">&lt;!-- 设置苹果工具栏颜色 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>format-detection<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>telphone<span class="token punctuation">=</span>no, email<span class="token punctuation">=</span>no<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token comment" spellcheck="true">&lt;!-- 忽略页面中的数字识别为电话，忽略email识别 --></span>
<span class="token comment" spellcheck="true">&lt;!-- 启用360浏览器的极速模式(webkit) --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>renderer<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>webkit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token comment" spellcheck="true">&lt;!-- 避免IE使用兼容模式 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token comment" spellcheck="true">&lt;!-- 不让百度转码 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Cache-Control<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>no-siteapp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token comment" spellcheck="true">&lt;!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>HandheldFriendly<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token comment" spellcheck="true">&lt;!-- 微软的老式浏览器 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MobileOptimized<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>320<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token comment" spellcheck="true">&lt;!-- uc强制竖屏 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>screen-orientation<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>portrait<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token comment" spellcheck="true">&lt;!-- QQ强制竖屏 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>x5-orientation<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>portrait<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token comment" spellcheck="true">&lt;!-- UC强制全屏 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>full-screen<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>yes<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token comment" spellcheck="true">&lt;!-- QQ强制全屏 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>x5-fullscreen<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token comment" spellcheck="true">&lt;!-- UC应用模式 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>browsermode<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>application<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token comment" spellcheck="true">&lt;!-- QQ应用模式 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>x5-page-mode<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token comment" spellcheck="true">&lt;!-- windows phone 点击无高光 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msapplication-tap-highlight<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token comment" spellcheck="true">&lt;!-- iOS 图标 begin --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>apple-touch-icon-precomposed<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/apple-touch-icon-57x57-precomposed.png<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token comment" spellcheck="true">&lt;!-- iPhone 和 iTouch，默认 57x57 像素，必须有 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>apple-touch-icon-precomposed<span class="token punctuation">"</span></span> <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>114x114<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/apple-touch-icon-114x114-precomposed.png<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token comment" spellcheck="true">&lt;!-- Retina iPhone 和 Retina iTouch，114x114 像素，可以没有，但推荐有 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>apple-touch-icon-precomposed<span class="token punctuation">"</span></span> <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>144x144<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/apple-touch-icon-144x144-precomposed.png<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token comment" spellcheck="true">&lt;!-- Retina iPad，144x144 像素，可以没有，但推荐有 --></span>
<span class="token comment" spellcheck="true">&lt;!-- iOS 图标 end --></span>

<span class="token comment" spellcheck="true">&lt;!-- iOS 启动画面 begin --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>apple-touch-startup-image<span class="token punctuation">"</span></span> <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>768x1004<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/splash-screen-768x1004.png<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token comment" spellcheck="true">&lt;!-- iPad 竖屏 768 x 1004（标准分辨率） --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>apple-touch-startup-image<span class="token punctuation">"</span></span> <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1536x2008<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/splash-screen-1536x2008.png<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token comment" spellcheck="true">&lt;!-- iPad 竖屏 1536x2008（Retina） --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>apple-touch-startup-image<span class="token punctuation">"</span></span> <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1024x748<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/Default-Portrait-1024x748.png<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token comment" spellcheck="true">&lt;!-- iPad 横屏 1024x748（标准分辨率） --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>apple-touch-startup-image<span class="token punctuation">"</span></span> <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2048x1496<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/splash-screen-2048x1496.png<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token comment" spellcheck="true">&lt;!-- iPad 横屏 2048x1496（Retina） --></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>apple-touch-startup-image<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/splash-screen-320x480.png<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token comment" spellcheck="true">&lt;!-- iPhone/iPod Touch 竖屏 320x480 (标准分辨率) --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>apple-touch-startup-image<span class="token punctuation">"</span></span> <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>640x960<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/splash-screen-640x960.png<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token comment" spellcheck="true">&lt;!-- iPhone/iPod Touch 竖屏 640x960 (Retina) --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>apple-touch-startup-image<span class="token punctuation">"</span></span> <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>640x1136<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/splash-screen-640x1136.png<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token comment" spellcheck="true">&lt;!-- iPhone 5/iPod Touch 5 竖屏 640x1136 (Retina) --></span>
<span class="token comment" spellcheck="true">&lt;!-- iOS 启动画面 end --></span>

<span class="token comment" spellcheck="true">&lt;!-- iOS 设备 end --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msapplication-TileColor<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#000<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token comment" spellcheck="true">&lt;!-- Windows 8 磁贴颜色 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msapplication-TileImage<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon.png<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token comment" spellcheck="true">&lt;!-- Windows 8 磁贴图标 --></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>alternate<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>application/rss+xml<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>RSS<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/rss.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token comment" spellcheck="true">&lt;!-- 添加 RSS 订阅 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>shortcut icon<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image/ico<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/favicon.ico<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token comment" spellcheck="true">&lt;!-- 添加 favicon icon --></span>

<span class="token comment" spellcheck="true">&lt;!-- sns 社交标签 begin --></span>
<span class="token comment" spellcheck="true">&lt;!-- 参考微博API --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>og:type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>类型<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>og:url<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>URL地址<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>og:title<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>标题<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>og:image<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>图片<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>og:description<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>描述<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token comment" spellcheck="true">&lt;!-- sns 社交标签 end --></span>
</code></pre>
<p>参考：<a href="https://github.com/yisibl/blog/issues/1" target="_blank" rel="external">常用的 HTML 头部标签</a></p>
]]></content>
      
        <categories>
            
            <category> html </category>
            
        </categories>
        
        
        <tags>
            
            <tag> html </tag>
            
            <tag> meta </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Promise]]></title>
      <url>/2017/03/28/Promise/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr>
<p>首先设想一个日常开发常常会遇到的需求：在多个接口异步请求数据，然后利用这些数据来进行一系列的操作。一般会这样去写：</p>
<pre class=" language-javascript"><code class="language-javascript">$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
url<span class="token punctuation">:</span> <span class="token string">'......'</span><span class="token punctuation">,</span>
success<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
<span class="token comment" spellcheck="true">// 要在第一个请求成功后才可以执行下一步</span>
url<span class="token punctuation">:</span> <span class="token string">'......'</span><span class="token punctuation">,</span>
success<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment" spellcheck="true">// ......</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>这样的写法的原理是，当执行一些异步操作时，我们需要知道操作是否已经完成，所有当执行完成的时候会返回一个回调函数，表示操作已经完成。</p>
<p>使用回调函数的形式理解起来并不困难，但是实际的应用当中会有以下的缺点：</p>
<blockquote>
<p>1.在需要多个操作的时候，会导致多个回调函数嵌套，导致代码不够直观，就是常说的 Callback Hell。<br>2.如果几个异步操作之间并没有前后顺序之分（例如不需要前一个请求的结果作为后一个请求的参数）时，同样需要等待上一个操作完成再实行下一个操作。</p>
</blockquote>
<p>为了解决上述的问题，Promise 对象应运而生，在 EMCAScript 2015 当中已经成为标准。</p>
<h2 id="什么是-Promise"><a href="#什么是-Promise" class="headerlink" title="什么是 Promise"></a>什么是 Promise</h2><hr>
<blockquote>
<p>一个 Promise 对象可以理解为一次将要执行的操作（常常被用于异步操作），使用了 Promise<br>对象之后可以用一种链式调用的方式来组织代码，让代码更加直观。而且由于 Promise.all<br>这样的方法存在，可以让同时执行多个操作变得简单。接下来就来简单介绍 Promise 对象。</p>
</blockquote>
<p><strong>resolve 和 reject</strong></p>
<p>首先来看一段使用了 Promise 对象的代码。首先来看一段使用了 Promise 对象的代码。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> helloWorld <span class="token punctuation">(</span>ready<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>ready<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
<span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">"Good bye!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">helloWorld</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token function">alert</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token function">alert</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>上面的代码实现的功能非常简单，helloWord 函数接受一个参数，如果为 true 就打印 “Hello World!”，如果为 false 就打印错误的信息。helloWord 函数返回的是一个 Promise 对象。</p>
<p>在 Promise 对象当中有两个重要方法————resolve 和 reject。</p>
<p>resolve 方法可以使 Promise 对象的状态改变成成功，同时传递一个参数用于后续成功后的操作，在这个例子当中就是 Hello World! 字符串。</p>
<p>reject 方法则是将 Promise 对象的状态改变为失败，同时将错误的信息传递到后续错误处理的操作。</p>
<p><strong>Promise 的三种状态</strong></p>
<p>上面提到了 resolve 和 reject 可以改变 Promise 对象的状态，那么它究竟有哪些状态呢？</p>
<blockquote>
<p>Promise 对象有三种状态：</p>
<p>1.Fulfilled 可以理解为成功的状态<br>2.Rejected 可以理解为失败的状态 Pending 既不是 Fulfilld 也不是<br>3.Rejected 的状态，可以理解为 Promise 对象实例创建时候的初始状态</p>
</blockquote>
<p>helloWorld 的例子中的 then 方法就是根据 Promise 对象的状态来确定执行的操作，resolve 时执行第一个函数（onFulfilled），reject 时执行第二个函数（onRejected）。</p>
<p><strong>then 和 catch</strong></p>
<p><strong>then</strong></p>
<p>helloWorld 的例子当中利用了 then(onFulfilld, onRejected) 方法来执行一个任务打印 “Hello World!”，在多个任务的情况下 then 方法同样可以用一个清晰的方式完成。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> printHello <span class="token punctuation">(</span>ready<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>ready<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
<span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">"Good bye!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> printWorld <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> printExclamation <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">printHello</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token function">alert</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>printWorld<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>printExclamation<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>上述例子通过链式调用的方式，按顺序打印出了相应的内容。then 可以使用链式调用的写法原因在于，每一次执行该方法时总是会返回一个 Promise 对象。另外，在 then onFulfilled 的函数当中的返回值，可以作为后续操作的参数，因此上面的例子也可以写成：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token function">printHello</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">return</span> message<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">return</span> message  <span class="token operator">+</span> <span class="token string">' World'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">return</span> message <span class="token operator">+</span> <span class="token string">'!'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token function">alert</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p><strong>catch</strong><br>catch 方法是 then(onFulfilled, onRejected) 方法当中 onRejected 函数的一个简单的写法，也就是说可以写成 then(fn).catch(fn)，相当于 then(fn).then(null, fn)。使用 catch 的写法比一般的写法更加清晰明确。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token function">somePromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">return</span> <span class="token function">anotherPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">return</span> <span class="token function">yetAnotherPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>log<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>console<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// &lt;-- this is badass</span>
</code></pre>
<p><strong>Promise.all 和 Promise.race</strong></p>
<p>Promise.all 可以接收一个元素为 Promise 对象的数组作为参数，当这个数组里面所有的 Promise 对象都变为 resolve 时，该方法才会返回。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["Hello", "World"]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>上面的例子模拟了传输两个数据需要不同的时长，虽然 p2 的速度比 p1 要快，但是 Promise.all 方法会按照数组里面的顺序将结果返回。</p>
<p>日常开发中经常会遇到这样的需求，在不同的接口请求数据然后拼合成自己所需的数据，通常这些接口之间没有关联（例如不需要前一个接口的数据作为后一个接口的参数），这个时候 Promise.all 方法就可以派上用场了。</p>
<p>还有一个和 Promise.all 相类似的方法 Promise.race，它同样接收一个数组，不同的是只要该数组中的 Promise 对象的状态发生变化（无论是 resolve 还是 reject）该方法都会返回。</p>
<h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><hr>
<p><img src="https://ooo.0o0.ooo/2017/05/22/5922f144964af.png" alt="promise.png"><br>在浏览器端，一些主流的浏览器都已经可以使用 Promise 对象进行开发，在 Node.js 配合 babel 也可以很方便地使用。</p>
<p>如果要兼容旧的浏览器，建议可以寻找一些第三方的解决方案，例如 jQuery 的 $.Deferred。</p>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> ES6 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS中的回调函数]]></title>
      <url>/2017/03/24/JS%E4%B8%AD%E7%9A%84%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<h4 id="关于回调函数"><a href="#关于回调函数" class="headerlink" title="关于回调函数"></a>关于回调函数</h4><p>首先要了解，在 js 中，函数也是对象，可以赋值给变量，可以作为参数放在函数的参数列表中。比如：</p>
<pre class=" language-JavaScript"><code class="language-JavaScript">var doSomething = function(a,b)
{
return a + b;
}
</code></pre>
<p>这段代码的意思是定义一个匿名函数，这个匿名函数除了没有名字之外，其他跟普通的函数没有什么两样。然后把匿名函数赋值给变量doSomething。接下来我们调用：</p>
<pre class=" language-JavaScript"><code class="language-JavaScript">console.log(doSomething(2,3));//5
</code></pre>
<p>回调函数，就是放在另外一个函数（如 parent）的参数列表中，作为参数传递给这个 parent，然后在 parent 函数体的某个位置执行:</p>
<pre class=" language-JavaScript"><code class="language-JavaScript">var doit = function(callback)
{
var a = 1,
b = 2,
c = 3;
var t = callback(a,b,c);
return t + 10;
};
var d = doit(function(x,y,z){
return (x+y+z);
});
console.log(d);
</code></pre>
<p>先定义 doit 函数，有一个参数 callback。这个 callback 就是回调函数，名字可以任意取。看函数体，先定义三个变量 a,b,c。然后调用 callback 函数。最后返回一个值。</p>
<p>下面就调用 doit 函数了。要注意的是，刚才定义 doit 时，callback 并没有定义，所以刚才并不知道 callback 是干什么用的。这其实很好理解，我们平时定义函数的时候，参数也只是给出了一个名字，比如 a,在函数体中使用 a，但整个过程也并不知道 a 到底是什么，只有在调用那个函数的时候才指定 a 的具体值，比如2.回过头来，在调用 doit 的时候，我们就需要指定 callback 究竟是个什么东西了。可以看到，这个函数完成了一个 sum 功能。</p>
<p>上述代码的执行过程是：</p>
<p>调用 doit函数，参数是一个匿名函数；进入 doit 的函数体中，先定义 a,b,c，然后执行刚才的匿名函数，参数是 a,b,c，并返回一个 t，最后返回一个 t+10给 d。</p>
<hr>
<p>传统函数以参数形式输入数据，并且使用返回语句返回值。理论上，在函数结尾处有一个return返回语句，结构上就是：一个输入点和一个输出点。这比较容易理解，函数本质上就是输入和输出之间实现过程的映射。</p>
<p>但是，当函数的实现过程非常漫长，你是选择等待函数完成处理，还是使用回调函数进行异步处理呢？这种情况下，使用回调函数变得至关重要，例如：AJAX请求。若是使用回调函数进行处理，代码就可以继续进行其他任务，而无需空等。实际开发中，经常在javascript中使用异步调用，甚至在这里强烈推荐使用。</p>
<p>因此，回调本质上是一种设计模式，并且jQuery(包括其他框架)的设计原则遵循了这个模式。</p>
<p>在JavaScript中，回调函数具体的定义为：函数A作为参数(函数引用)传递到另一个函数B中，并且这个函数B执行函数A。我们就说函数A叫做回调函数。如果没有名称(函数表达式)，就叫做匿名回调函数。</p>
<pre class=" language-JavaScript"><code class="language-JavaScript">//基本方式
function doSomething(callback) {
// … 
// Call the callback
callback('stuff', 'goes', 'here');
} 
function foo(a, b, c) {
// I'm the callback
alert(a + " " + b + " " + c);
} 
doSomething(foo);
</code></pre>
<pre class=" language-JavaScript"><code class="language-JavaScript">//匿名函数的形式
function dosomething(damsg, callback){
alert(damsg);
if(typeof callback == "function") 
callback();
} 
dosomething("回调函数", function(){
alert("和 jQuery 的 callbacks 形式一样!");
});
</code></pre>
<p>所以callback 不一定用于异步，一般同步(阻塞)的场景下也经常用到回调，比如要求执行某些操作后执行回调函数。</p>
<p><strong>回调什么时候执行</strong></p>
<p>回调函数，一般在同步情境下是最后执行的，而在异步情境下有可能不执行，因为事件没有被触发或者条件不满足。</p>
<p><strong>回调函数的使用场合</strong></p>
<p>资源加载：动态加载js文件后执行回调，加载iframe后执行回调，ajax操作回调，图片加载完成执行回调，AJAX等等。</p>
<p>DOM事件及Node.js事件基于回调机制(Node.js回调可能会出现多层回调嵌套的问题)。</p>
<p>setTimeout的延迟时间为0，这个hack经常被用到，settimeout调用的函数其实就是一个callback的体现</p>
<p>链式调用：链式调用的时候，在赋值器(setter)方法中(或者本身没有返回值的方法中)很容易实现链式调用，而取值器(getter)相对来说不好实现链式调用，因为你需要取值器返回你需要的数据而不是this指针，如果要实现链式方法，可以用回调函数来实现setTimeout、setInterval的函数调用得到其返回值。由于两个函数都是异步的，即：他们的调用时序和程序的主流程是相对独立的，所以没有办法在主体里面等待它们的返回值，它们被打开的时候程序也不会停下来等待，否则也就失去了setTimeout及setInterval的意义了，所以用return已经没有意义，只能使用callback。callback的意义在于将timer执行的结果通知给代理函数进行及时处理。</p>
<p><strong>回调函数的传递</strong></p>
<pre class=" language-JavaScript"><code class="language-JavaScript">$.get('myhtmlpage.html', myCallBack);//这是对的
$.get('myhtmlpage.html', myCallBack('foo', 'bar'));//这是错的，那么要带参数呢？
$.get('myhtmlpage.html', function(){//带参数的使用函数表达式
myCallBack('foo', 'bar');
});
</code></pre>
<blockquote>
<p>另外，最好保证回调存在且必须是函数引用或者函数表达式： (callback &amp;&amp; typeof(callback) ===<br>“function”) &amp;&amp; callback();</p>
</blockquote>
<hr>
<h4 id="回调函数使用实例"><a href="#回调函数使用实例" class="headerlink" title="回调函数使用实例"></a>回调函数使用实例</h4><pre class=" language-JavaScript"><code class="language-JavaScript">//使用call方法
function Thing(name) {
this.name = name;
}
Thing.prototype.doSomething = function(callback) {
// Call our callback, but using our own instance as the context
callback.call(this);
}

function foo() {
alert(this.name);
}

var t = new Thing('Joe');
t.doSomething(foo); // Alerts "Joe" via `foo`
</code></pre>
<pre class=" language-JavaScript"><code class="language-JavaScript">//传参数
function Thing(name) {
this.name = name;
}
Thing.prototype.doSomething = function(callback, salutation) {
// Call our callback, but using our own instance as the context
callback.call(this, salutation);
} 
function foo(salutation) {
alert(salutation + " " + this.name);
} 
var t = new Thing('Joe');
t.doSomething(foo, 'Hi'); // Alerts "Hi Joe" via `foo`
</code></pre>
<pre class=" language-JavaScript"><code class="language-JavaScript">//使用apply传参
function Thing(name) {
this.name = name;
}
Thing.prototype.doSomething = function(callback) {
// Call our callback, but using our own instance as the context
callback.apply(this, ['Hi', 3, 2, 1]);
} 
function foo(salutation, three, two, one) {
alert(salutation + " " + this.name + " – " + three + " " + two + " " + one);
} 
var t = new Thing('Joe');
t.doSomething(foo); // Alerts "Hi Joe – 3 2 1" via `foo`
</code></pre>
<pre class=" language-JavaScript"><code class="language-JavaScript">//假如提供的数据源是一整数,为某学生的分数,当num<=0,由底层处理,当n>0时由高层处理.
//将下面这个函数拷贝下来存盘为1.js
function f(num,callback){
if(num<0) { 
alert("调用低层函数处理!");
alert("分数不能为负,输入错误!"); 
}else if(num==0){
alert("调用低层函数处理!");
alert("该学生可能未参加考试！");
}else{
alert("调用高层函数处理!");
callback();
}
}
</code></pre>
<pre class=" language-html"><code class="language-html">//将下面这个test.html文件存盘与1.js在一个目录下：
<span class="token doctype">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd"></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>gb2312<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>无标题文档<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
function test(){
var p=document.getElementById("pp");
pp.innerText="";
var num=document.getElementById("score").value;
f(num,function(){ //匿名高层处理函数
if(num&lt;60) alert("未及格！");
else if(num&lt;=90) alert("该生成绩优良！");
else alert("该生成绩优秀!"); })
pp.innerText="by since1978 qq558064!"
}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>
回调函数示例:当学生成绩score&lt;=0分时候，由底层处理；当score>0时，由高层处理。
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
请输入学生成绩<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>score<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">onClick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test()<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span> 看看结果<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
</code></pre>
<pre class=" language-JavaScript"><code class="language-JavaScript">//node.js中出现的回调函数
app.use(function(req, res, next) {
var err = new Error('Not Found');
err.status = 404;
next(err);
});
</code></pre>
<hr>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>回调函数是实现js异步编程的四种方法之一，但并不推荐用此方法： 回调函数的优点是简单、容易理解和部署，缺点是不利于代码的阅读和维护，各个部分之间高度耦合（Coupling），流程会很混乱，而且每个任务只能指定一个回调函数。</p>
<p>不过正如上文所说，回调函数不一定用于异步，一般同步(阻塞)的场景下也经常用到回调，比如要求执行某些操作后执行回调函数。</p>
<blockquote>
<p>在javascript中回调函数非常重要，它们几乎无处不在</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 回调函数 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS中this的指向]]></title>
      <url>/2017/03/22/JS%E4%B8%ADthis%E7%9A%84%E6%8C%87%E5%90%91/</url>
      <content type="html"><![CDATA[<p><strong>this是Javascript语言的一个关键字。</strong> </p>
<p>它代表函数运行时，自动生成的一个内部对象，只能在函数内部使用。比如:</p>
<pre><code>function test(){ 

　　　　this.x = 1; 

　　}
</code></pre><blockquote>
<p>随着函数使用场合的不同，this的值会发生变化。但是有一个总的原则，那就是this指的是，调用函数的那个对象。</p>
</blockquote>
<p>下面分四种情况，详细讨论this的用法。<br><a id="more"></a></p>
<p><strong>情况一：纯粹的函数调用</strong> </p>
<p>这是函数的最通常用法，属于全局性调用，因此this就代表全局对象。</p>
<p>请看下面这段代码，它的运行结果是1。</p>
<pre><code>function test(){ 

　　　　this.x = 1; 

　　　　alert(this.x); 

　　} 

　　test(); // 1
</code></pre><p>为了证明this就是全局对象，我对代码做一些改变：</p>
<pre><code>var x = 1; 

　　function test(){ 

　　　　alert(this.x); 

　　} 

　　test(); // 1
</code></pre><p>运行结果还是1。再变一下：</p>
<pre><code>var x = 1; 

　　function test(){ 

　　　　this.x = 0; 

　　} 

　　test(); 

　　alert(x); //0
</code></pre><p><strong>情况二：作为对象方法的调用</strong> </p>
<p>函数还可以作为某个对象的方法调用，这时this就指这个上级对象。</p>
<pre><code>function test(){ 

　　　　alert(this.x); 

　　} 

　　var o = {}; 

　　o.x = 1; 

　　o.m = test; 

　　o.m(); // 1
</code></pre><p><strong>情况三 作为构造函数调用</strong> </p>
<p>所谓构造函数，就是通过这个函数生成一个新对象（object）。这时，this就指这个新对象。</p>
<pre><code>function test(){ 

　　　　this.x = 1; 

　　} 

　　var o = new test(); 

　　alert(o.x); // 1
</code></pre><p>运行结果为1。为了表明这时this不是全局对象，我对代码做一些改变：</p>
<pre><code>var x = 2; 

　　function test(){ 

　　　　this.x = 1; 

　　} 

　　var o = new test(); 

　　alert(x); //2
</code></pre><p>运行结果为2，表明全局变量x的值根本没变。</p>
<p><strong>情况四 apply调用</strong></p>
<p>apply()是函数对象的一个方法，它的作用是改变函数的调用对象，它的第一个参数就表示改变后的调用这个函数的对象。因此，this指的就是这第一个参数</p>
<p>　</p>
<pre><code>var x = 0; 

　　function test(){ 

　　　　alert(this.x); 

　　} 

　　var o={}; 

　　o.x = 1; 

　　o.m = test; 

　　o.m.apply(); //0
</code></pre><p>apply()的参数为空时，默认调用全局对象。因此，这时的运行结果为0，证明this指的是全局对象。 </p>
<p>如果把最后一行代码修改为 :</p>
<pre><code>o.m.apply(o); //1
</code></pre><p>运行结果就变成了1，证明了这时this代表的是对象o</p>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
            <tag> this </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ js中Math.random()生成指定范围数值的随机数]]></title>
      <url>/2017/03/20/js%E4%B8%ADMath-random-%E7%94%9F%E6%88%90%E6%8C%87%E5%AE%9A%E8%8C%83%E5%9B%B4%E6%95%B0%E5%80%BC%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0/</url>
      <content type="html"><![CDATA[<p><strong>定义和用法</strong></p>
<p>random() 方法可返回介于 0 ~ 1 之间的一个随机数。</p>
<p><strong>语法</strong></p>
<p>Math.random()</p>
<p><strong>返回值</strong></p>
<p>0.0 ~ 1.0 之间的一个伪随机数。</p>
<p><strong>实例</strong></p>
<p>在本例中，我们将取得介于 0 到 1 之间的一个随机数：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token comment" spellcheck="true">// 输出：</span>
<span class="token number">0.15246391076246546</span>
</code></pre>
<p><strong>关于如何生成指定范围值的随机数？</strong></p>
<blockquote>
<p>利用 parseInt()、Math.floor() 或者 Math.ceil()进行四舍五入处理</p>
</blockquote>
<p>我们看到，直接使用Math.random()方法，生成的是一个小于1的数，所以：</p>
<blockquote>
<p>Math.random()*5</p>
</blockquote>
<p>得到的结果是一个小于5的随机数。而我们通常希望得到的是0-5之间的整数，所以我们需要对得到的结果四舍五入处理一下，从而得到我们期望的整数。parseInt()、Math.floor()和Math.ceil()都可以起到四舍五入的作用。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> randomNum <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>randomNum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2.9045290905811183 </span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>randomNum<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>
<span class="token function">alert</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>randomNum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>
<span class="token function">alert</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>randomNum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span>
</code></pre>
<p>由测试的代码我们可以看到，<code>parseInt()</code>和<code>Math.floor()</code>的效果是一样的，都是向下取整数部分。所以<code>parseInt(Math.random()*5,10)</code>和<code>Math.floor(Math.random()*5)</code>都是生成的0-4之间的随机数，<code>Math.ceil(Math.random()*5)</code>则是生成的1-5之间的随机数。</p>
<p><strong>生成指定范围数值随机数</strong></p>
<p>如果你希望生成1到任意值的随机数，公式就是这样的：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// max - 期望的最大值</span>
<span class="token function">parseInt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span>max<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span>max<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>如果你希望生成0到任意值的随机数，公式就是这样的：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// max - 期望的最大值</span>
<span class="token function">parseInt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>max<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>max<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>如果你希望生成任意值到任意值的随机数，公式就是这样的：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// max - 期望的最大值</span>
<span class="token comment" spellcheck="true">// min - 期望的最小值 </span>
<span class="token function">parseInt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>max<span class="token operator">-</span>min<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>min<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>max<span class="token operator">-</span>min<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Node.js部署到阿里云服务器]]></title>
      <url>/2017/03/16/nodejs%E9%83%A8%E7%BD%B2%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91%E5%85%A8%E8%BF%87%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>整个部署过程学到了不少东西，记录一下。</p>
<blockquote>
<p>参考了以下文章：<br> <a href="http://itbilu.com/other/relate/NJ2TJohl.html" target="_blank" rel="external">http://itbilu.com/other/relate/NJ2TJohl.html</a><br><a href="https://segmentfault.com/a/1190000004051670" target="_blank" rel="external">https://segmentfault.com/a/1190000004051670</a><br><a href="http://borninsummer.com/2015/06/17/notes-on-developing-nodejs-webapp/" target="_blank" rel="external">http://borninsummer.com/2015/06/17/notes-on-developing-nodejs-webapp/</a><br><a href="https://bbs.aliyun.com/read/146189.html" target="_blank" rel="external">https://bbs.aliyun.com/read/146189.html</a></p>
</blockquote>
<p><strong>1. 到阿里云购买云服务器 ECS 。</strong><br><a href="https://www.aliyun.com/product/ecs" target="_blank" rel="external">https://www.aliyun.com/product/ecs</a><br>如果是在校学生，在淘宝有实名认证，且在学信网有注册，可以试试抢学生的首月优惠套餐。<a href="https://www.aliyun.com/act/aliyun/campus.html" target="_blank" rel="external">https://www.aliyun.com/act/aliyun/campus.html</a><br>作为一个穷逼+不熟悉服务器配置的菜鸟。选了最便宜的套餐：<br>CPU： 1核 / 内存： 1024 MB / 带宽：1Mbps / 操作系统： CentOS 7.0<br>购买环节会设置 ssh 登陆密码，记下密码。<br>登陆到阿里云，查看购买的实例。<br>注意公网 IP，下一步会用到<br><img src="https://ooo.0o0.ooo/2017/05/23/5923e085cd078.jpg" alt="20170212142340544.jpg"><br><strong>2. 登陆服务器</strong><br>sudo ssh 你的服务器ip地址</p>
<blockquote>
<p>关于 ssh 登陆，具体可以看<a href="http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html</a> 这篇文章。</p>
</blockquote>
<p>提示输入mac的密码，提示输入服务器密码。<br>输入后连接成功并显示服务器信息，如下：<br><img src="http://img.blog.csdn.net/20170212142549327?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbW91bWFvYnVjaGl5dQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="成功的状态"></p>
<p>登陆服务器后。这里对于我这个 Linux 菜鸟有个大坑………就是 Linux 系统常见的目录结构和文件放置区域。<br>使用 root 用户身份登陆后，会直接进入到下图 红色箭头标出的 root 目录下。先 cd .. 跳转到上一层, 再 ls -a ，就可以看到类似下图的目录结构了。</p>
<p><img src="https://ooo.0o0.ooo/2017/05/23/5923e0c3acd93.png" alt="20170212142640688.png"></p>
<p><strong>3.安装 node 和 mongodb</strong></p>
<blockquote>
<p>node – 编译后二进制文件应在/usr/local/bin/node 下<br> mongodb –安装在/usr/local/mongodb 下</p>
</blockquote>
<p>下面就一步一步来，首先升级CentOS</p>
<pre><code>yum -y update
</code></pre><p>升级后，跳转到 /usr/local/src , 这个文件夹通常用来存放软件源代码</p>
<pre><code>cd /usr/local/src
</code></pre><p>下载 nodejs 代码，也可以使用scp命令直接上传，因为下载实在太慢了。</p>
<pre><code>wget http://nodejs.org/dist/v0.12.5/node-v0.12.5.tar.gz
//注*根据最新版本号为准
</code></pre><p>解压</p>
<pre><code>tar -xzvf node-v0.12.5.tar.gz
</code></pre><p>进入解压后的文件夹</p>
<pre><code>cd node-v0.12.5
</code></pre><p>执行配置脚本来进行编译预处理</p>
<pre><code>./configure
</code></pre><p>编译源代码</p>
<pre><code>make
//注*这个时间可能会很久
</code></pre><p>当编译完成后，需要使之在系统范围内可用, 编译后的二进制文件将被放置到系统路径，默认情况下，Node二进制文件应该放在/user/local/bin/node文件夹下</p>
<pre><code>make install
</code></pre><p>安装 express 和 forever，这两个模块都推荐 global 安装</p>
<pre><code>npm -g install express forever
</code></pre><p>建立超级链接, 不然 sudo node 时会报 “command not found”</p>
<pre><code>sudo ln -s /usr/local/bin/node /usr/bin/node
sudo ln -s /usr/local/lib/node /usr/lib/node
sudo ln -s /usr/local/bin/npm /usr/bin/npm
sudo ln -s /usr/local/bin/node-waf /usr/bin/node-waf
sudo ln -s /usr/local/bin/forever /usr/bin/forever
</code></pre><p>Nodejs到这里就基本安装完成了。</p>
<p><strong>下面来安装mongodb</strong></p>
<blockquote>
<p>软件安装位置：/usr/local/mongodb<br>数据存放位置：/var/mongodb/data<br>日志存放位置：/var/mongodb/logs</p>
</blockquote>
<p>首先下载安装包</p>
<pre><code>cd /usr/local
wget http://fastdl.mongodb.org/linux/mongodb-linux-x86_64-2.4.9.tgz
</code></pre><p>解压安装包，重命名文件夹为mongodb</p>
<pre><code>tar zxvf mongodb-linux-x86_64-2.6.0.tgz
mv mongodb-linux-x86_64-2.6.0 mongodb
</code></pre><p>创建数据和日志存放目录</p>
<pre><code>mkdir /var/mongodb
mkdir /var/mongodb/data
mkdir /var/mongodb/logs
</code></pre><p>打开rc.local文件，添加CentOS开机启动项：</p>
<pre><code>vim /etc/rc.d/rc.local
</code></pre><p>将mongodb启动命令追加到本文件中，让mongodb开机自启动：</p>
<pre><code>/usr/local/mongodb/bin/mongod --dbpath=/var/mongodb/data --logpath 
/var/mongodb/logs/log.log -fork
</code></pre><p>关闭 vim 后，直接手动启动mongodb</p>
<pre><code>/usr/local/mongodb/bin/mongod --dbpath=/var/mongodb/data --logpath 
/var/mongodb/logs/log.log -fork
</code></pre><p>看到类似的信息，说明已启动成功。我在这里发了个傻，以为26308是port号，导致后面设置port时折腾了好久。其实这里的 forked process 和 port 号是两个东西， 这个是程序本身在Server上的进程。</p>
<pre><code>forked process: 26308
</code></pre><p>启动mongo shell</p>
<pre><code>cd /usr/local/mongodb/bin/
./mongo
</code></pre><p>在 mongo shell 中创建管理员及数据库</p>
<pre><code>use admin //admin 数据库
db.createUser({
user: &quot;用户名&quot;,
pwd:&quot;登陆密码&quot;,
roles:[&quot;userAdminAnyDatabase&quot;] //超级管理员
})

use databaseFoo //nodeapp 要连接的数据库
db.createUser({
user: &quot;用户名&quot;,
pwd:&quot;登陆密码&quot;,
roles:[&quot;readWrite&quot;] //读写权限
})
</code></pre><p>到这里 mongodb 基本已经安装设置完成了。具体数据的迁移导入可自行研究。</p>
<p><strong>4.配置及启动node app</strong></p>
<p>我们把 nodeapp 的程序放在 /home 下</p>
<pre><code>cd /home
</code></pre><p>我使用 <a href="http://git.oschina.net/" target="_blank" rel="external">http://git.oschina.net/</a> 管理代码。它的私有库是免费的。基本操作和 github 一样。<br>复制代码：</p>
<pre><code>git clone https://git.oschina.net/xxxxxxx/nodeapp.git   //你的repo地址
</code></pre><p>注*同时可以使用图形化程序进行上传如File Zilla<br><img src="https://ooo.0o0.ooo/2017/05/23/5923e0fe2fd73.png" alt="20170212201742447.png"><br>进入 nodeapp 文件夹</p>
<pre><code>cd nodeapp
</code></pre><p>（若后续代码变更，提交到 git repo 后直接git pull即可部署代码）<br>安装nodeapp的所有依赖</p>
<pre><code>npm install
</code></pre><p>在启动文件 ( 我的是 app.js ) 中设置数据库连接</p>
<pre><code>vim app.js
</code></pre><p>数据库连接类似下面的格式，由于数据库安装在同一服务器，因此 host 为127.0.0.1：</p>
<pre><code>var dbUrl = &#39;mongodb://用户名:登陆密码@127.0.0.1/databaseFoo&#39;;
mongoose.connect(dbUrl)
</code></pre><p>这里要注意，如果直接 npm start 或 node app.js 启动，则一旦退出 ssh 远程登陆，nodeapp 就会停止运行。因此我们使用 forever 启动 nodeapp。</p>
<pre><code>NODE_ENV=production forever start app.js
</code></pre><blockquote>
<p>如今可以使用PM2启动程序，步骤如下：<br>使用它要先安装它，用root账号和全局模式安装一下：<br><code>npm install -g pm2</code><br>用它来启动程序（在当前目录下可以直接启动）<br><code>pm2 start app.js --name uops</code></p>
</blockquote>
<p>在蹚过无数坑后，项目部署成功。用浏览器打开 公网IP:端口号 即可看到 nodeapp 的首页</p>
]]></content>
      
        <categories>
            
            <category> node.js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
            <tag> Node.js </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
